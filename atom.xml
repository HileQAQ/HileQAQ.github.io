<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hile_Meow&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-07T15:06:20.744Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Hile_Meow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20220306周赛</title>
    <link href="http://example.com/2022/03/07/20220306%E5%91%A8%E8%B5%9B/"/>
    <id>http://example.com/2022/03/07/20220306%E5%91%A8%E8%B5%9B/</id>
    <published>2022-03-07T14:53:00.000Z</published>
    <updated>2022-03-07T15:06:20.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-贪心"><a href="#A-贪心" class="headerlink" title="A 贪心"></a>A 贪心</h1><p>牛逼贪心，真的神秘。</p><p>在和牛逼学弟$B.White$讨论后，产生了以下思路：</p><p>若$a_{1}…a_{x}$是一个$1$到$x$的排列，我们称$a$是<strong>饱和</strong>的。</p><p>考虑$p$的任意饱和前缀$p_1…p_{i}$，若这$i$个数能被划分为两个上升序列，则这一段无论如何划分，和$p_{i+1}…p_n$都是互不影响的。</p><p>证明：$p_{i+1}…p_{n}$中的任意元素都比$p_1…p_i$大，所以后面划分的两个序列可以随意拼接到前面两个序列后面。</p><p>由上得，所有饱和前缀与其剩余部分的结果相互独立，我们可以处理出所有饱和前缀，然后用这些前缀的位置把$p$划分为多个独立的<strong>饱和段</strong>，所有饱和段互不影响。</p><p>此时，我们只需要求出所有饱和段的划分结果，然后所有饱和段的最大值减去最小值之和就是最终的答案。</p><p>考虑如何求出某一个饱和段的答案，我们有以下结论：</p><ol><li>对于一个饱和段，其不含有任何饱和前缀</li><li>对于一个饱和段，其最终形成的两个序列唯一</li><li>从头开始，每次找到比当前大的数直到没有，此时形成的序列一定是两个序列之一（或者无合法序列）</li></ol><p>证明：</p><p>假设饱和段中存在一个饱和前缀，则其会产生两个新的饱和段，这和前提（找出所有$p$的饱和前缀划分为多个饱和段）矛盾，因此1得证。</p><p>考虑一个饱和段中，元素$a$后面第一个比他大的数为$b$，则有三种情况：</p><ul><li>$b$不存在，此时$a$后面所有元素一定不和$a$属于一个序列</li><li>$a,b$相邻/不相邻，此时在一个序列中$a$后面一定紧接$b$<ul><li>证明：由(1)知饱和段中没有饱和前缀，则存在其他<strong>比$a$小且在$b$之后</strong>的数$c$会放在和$a$相异的另一个上升序列中，由于$c&lt;a&lt;b$，我们只能将$b$放在$a$后面</li></ul></li></ul><p>当序列中每一个数作为$a$时，根据以上规则，我们都会将$b$后面第一个大于$a$的数放在$a$后面，因此<strong>序列的位置关系是确定的</strong>，(2),(3)得证。</p><p>由(3)知，我们可以遍历一遍获得一个上升序列，然后把剩下的放到另一个序列里，若剩下的数无序则无解。</p><p>总复杂度$O(n)$。</p><p><del>感觉把std踩了，这个线性做法是目前CF上跑的最快的</del></p><h1 id="B-签到"><a href="#B-签到" class="headerlink" title="B 签到"></a>B 签到</h1><p>当$n$为奇数时，这$n$个数模$k$同余；当$n$为偶数时，按照位置奇偶性构成两个模$k$同余的等价类或。</p><p>需要特判$(4,3 )$，因为此时模$k$的结果为$0,1,2,0$，$(1+3)\%3=0$，但是只有$(4,3)$这一种情况是特殊的（证明思路可以考虑$0$必须在图中出现$\frac{n}{2}$次）</p><h1 id="C-图论"><a href="#C-图论" class="headerlink" title="C 图论"></a>C 图论</h1><p>涉及中位数最值问题可以考虑二分答案，此时图中所有点权变为$1$或$-1$，问题转化成判断是否存在一条$1$到$n$的点权为正的路径。<del>关于SPFA，它死了</del></p><p>考虑点权的特殊性，可以推出以下结论，下面$(a,b)$表示一条连接两点权值分别为$a,b$的边：</p><ul><li>如果存在一条$(1,1)$边，一定可行（在这条边上来回走）</li><li>如果存在一条$(-1,-1)$边，我们不会去走（因为走$(-1,-1)$需要用$(1,1)$来补正）</li><li>如果我们只走$(1,-1)$和$(-1,1)$边，当且仅当$c_1=c_n=1$时可行。</li></ul><p>DFS/BFS/DSU判断即可。复杂度$O((n+m)\log10^9)$</p><h1 id="D-签到"><a href="#D-签到" class="headerlink" title="D 签到"></a>D 签到</h1><h1 id="E-几何"><a href="#E-几何" class="headerlink" title="E 几何"></a>E 几何</h1><p>推$O(1)$公式 (x)</p><p>无脑$O(\log\frac{1}{eps})$二分 (√)</p><p>直接二分半径，然后判断和边界是否有交点（点到线段距离），注意判断线段叉乘时精度要在$10^{-9}$以上。</p><p><del>计算几何嘛 WA了改改精度多交几发</del></p><p><strong>Part 2</strong>: $O(1)$公式的推导</p><p>todo</p><h1 id="F-签到"><a href="#F-签到" class="headerlink" title="F 签到"></a>F 签到</h1><h1 id="G-字符串"><a href="#G-字符串" class="headerlink" title="G 字符串"></a>G 字符串</h1><p>还没补，目前进度MLE84/TLE64</p><h1 id="H-图论"><a href="#H-图论" class="headerlink" title="H 图论"></a>H 图论</h1><p>读题面中所给代码，得知其作用是标记所有和$v$联通且$\Delta=a-b=a_{v}-b_{v}$的点，然后把这些点的$\Delta$都置零。</p><p>如果暴力进行1和3操作，发现对点的访问次数均摊后是线性的（一次1操作改变一个点，一次3操作把修改过的点还原），复杂度瓶颈在于1和3操作过程中需要遍历所有邻接边，因此考虑优化这个过程使得我们不需要遍历边而获得所有权值相等的连通点集。</p><p>我们可以用set来记录一个$(a_x-b_x,x)$的pair，每次从某个点开始dfs的时候就直接在set上二分，这样3操作的复杂度就合理了。</p><p>但是此时1操作修改树上节点时，还需要遍历并更新所有邻接点的set，瓶颈依旧在。如果只考虑以上做法，可以发现对于图也是一样的，此时并没有利用到树的性质。</p><p>假设我们定$1$为根，set里只记录子节点，此时对于1操作，我们只需要修改其父亲的set，因为子节点要访问父亲的时候直接寻找$a_{father}$就够了。而对于3操作，我们直接往根走直到$\Delta$不相等，然后dfs子树的set。</p><h1 id="I-线段树"><a href="#I-线段树" class="headerlink" title="I 线段树"></a>I 线段树</h1><p>先把所有数放到$[0,10^6]$的桶里，设其为$b$，则一个非零$MEX$值$x$可以取的时候必有$b[x]=x$，所以考虑用线段树维护$b_i-i$的区间最值。当加入一个数$a$的时候对应$[a:10^6]+1$，减去的时候对应$[a:10^6]-1$。对于查询就直接在线段树上递归查询最右侧的合法位置，总复杂度$O(q\log10^6)$。</p><h1 id="J-构造"><a href="#J-构造" class="headerlink" title="J 构造"></a>J 构造</h1><p>一个显然的结论是，所有行和列的$MEX$都有且只有一个数不为$0$，且至少有一个为$1$。</p><p>所以可以先找出$0$的位置，然后对这一行和列填充小于$MEX$的数，空余位置可以用最大的数补全。其他行列就随便填了。</p><h1 id="K-并查集"><a href="#K-并查集" class="headerlink" title="K 并查集"></a>K 并查集</h1><p>每次操作翻转两块，说明$1$和$0$的差奇偶性不变。如果我们将每次操作的两个位置连一条边，会发现每次操作会减少连通块中两个$1$或不变，因此只要带权并查集统计一下所有连通块内$1$的个数是否是偶数即可。</p><h1 id="L-dp"><a href="#L-dp" class="headerlink" title="L dp"></a>L dp</h1><p>问题等价于求有多少种从底部走到某个端点的路径。考虑$f_{i,j}$表示从$(1,1)$到$(i,j)$的路径数，则有</p><script type="math/tex; mode=display">f_{i,j}=f_{i-1,j-1}+f_{i-1,j}</script><p>有效状态最多$n$个，用map记录然后转移即可。</p><h1 id="M-快速幂"><a href="#M-快速幂" class="headerlink" title="M 快速幂"></a>M 快速幂</h1><script type="math/tex; mode=display">\sum_{i=a}^{b}\sum_{j=c}^{d}2^{i}3^{j}=S(b,d)-S(a-1,d)-S(c,b-1)+S(a-1,b-1)\\S(a,b)=\sum_{i=0}^{a}\sum_{j=0}^{b}2^i3^j=\sum_{i=0}^{a}2^i\sum_{j=0}^{b}3^j=\frac{2^{a+1}-1}{2-1}\times\frac{3^{b+1}-1}{3-1}</script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-贪心&quot;&gt;&lt;a href=&quot;#A-贪心&quot; class=&quot;headerlink&quot; title=&quot;A 贪心&quot;&gt;&lt;/a&gt;A 贪心&lt;/h1&gt;&lt;p&gt;牛逼贪心，真的神秘。&lt;/p&gt;
&lt;p&gt;在和牛逼学弟$B.White$讨论后，产生了以下思路：&lt;/p&gt;
&lt;p&gt;若$a_{1}…a</summary>
      
    
    
    
    <category term="个人训练" scheme="http://example.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>20220227周赛</title>
    <link href="http://example.com/2022/02/28/20220227%E5%91%A8%E8%B5%9B/"/>
    <id>http://example.com/2022/02/28/20220227%E5%91%A8%E8%B5%9B/</id>
    <published>2022-02-27T16:59:09.000Z</published>
    <updated>2022-03-08T07:52:51.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-最短路-dp"><a href="#A-最短路-dp" class="headerlink" title="A 最短路 dp"></a>A 最短路 dp</h1><p>赛中直接每次询问暴力Dijkstra，$O(qn\log n)$就能过，属于是CF神机太快了。</p><p>正解应该是dp，用$f_{c,i,j}$表示经过了$c$条边（$c+1$个点）后，$i$到$j$的最短距离，于是有转移</p><script type="math/tex; mode=display">f_{c,i,v}=\min(f_{c,i,v},f_{c-1,i,u}+w)\ \ e(u,v,w)\in E</script><p>因此每次可以在$O(nm)$时间内处理出经过$c$个点的最短路，此时再$O(q)$更新所有询问的答案，对于询问$q(u,v,x)$，答案即为$min(f_{c,u,v}+c\times x)$，总复杂度$O(n^2m+nq)$。<del>也就只比暴力快了400ms</del></p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Q=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> qx[Q],qy[Q],qw[Q],ans[Q];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n,m,q,d[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">array</span>&lt;<span class="keyword">int</span>,3&gt;&gt; E;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        E.push_back(&#123;u,v,w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;qx[i]&gt;&gt;qy[i]&gt;&gt;qw[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[<span class="number">0</span>][i][i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">1</span>;c&lt;n;c++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f[c&amp;<span class="number">1</span>],<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f[c&amp;<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> e:E)&#123;</span><br><span class="line">                f[c&amp;<span class="number">1</span>][i][e[<span class="number">1</span>]]=min(f[c&amp;<span class="number">1</span>][i][e[<span class="number">1</span>]],f[~c&amp;<span class="number">1</span>][i][e[<span class="number">0</span>]]+e[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">            ans[i]=min(ans[i],f[c&amp;<span class="number">1</span>][qx[i]][qy[i]]+(c+<span class="number">1</span>)*qw[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]&gt;<span class="number">1e9</span>)ans[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(qx[i]==qy[i])ans[i]=qw[i];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="B-签到"><a href="#B-签到" class="headerlink" title="B 签到"></a>B 签到</h1><p>阅读理解，看懂题目所给公式就会了。</p><p>如果要让结果最大，就要选取所有权值为奇数的边，因此答案就是所有奇边权之积，注意没有奇数边权输出$1$。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin&gt;&gt;T;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">            <span class="keyword">if</span>(a%<span class="number">2</span>)&#123;</span><br><span class="line">                ans*=a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="C-kmp"><a href="#C-kmp" class="headerlink" title="C kmp"></a>C kmp</h1><p>题意即求所有子串的最长公共前后缀长度之和。</p><p>由于$length\le5000$，对于所有起始位置跑一遍kmp，得到的next数组（前缀函数）就是最长公共前后缀，求和即可。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> nx[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnx</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)nx[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=nx[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])&#123;</span><br><span class="line">            assert(j!=nx[j<span class="number">-1</span>]);</span><br><span class="line">            j=nx[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        nx[i]=(s[i]==s[j])?++j:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// cin&gt;&gt;s;</span></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n=s.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        getnx(s.substr(i));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">            ans+=nx[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin&gt;&gt;T;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="D-模拟"><a href="#D-模拟" class="headerlink" title="D 模拟"></a>D 模拟</h1><p>纯模拟，建议写个函数单独提出x前后的数字，用map记录次数相同的项，求导就是$(ax^b)’=abx^{b-1}$。注意当求导后没有任何项的时候要输出0。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,ll&gt; mp;<span class="comment">//mp[a]=b &lt;=&gt; bx^a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">int</span> sgn=<span class="number">1</span>,val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x&gt;=<span class="number">0</span>;x--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[x]))&#123;</span><br><span class="line">            a.push_back(s[x]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[x]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            sgn=<span class="number">-1</span>;<span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        s[x]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!a.size())<span class="keyword">return</span> sgn;</span><br><span class="line">    <span class="keyword">while</span>(a.size())&#123;</span><br><span class="line">        val=val*<span class="number">10</span>+a.back();</span><br><span class="line">        a.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val*sgn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNxt</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sgn=<span class="number">1</span>,cnt=<span class="number">0</span>,val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[x]==<span class="string">&#x27;-&#x27;</span>)sgn=<span class="number">-1</span>,x++;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;n;x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[x]))&#123;</span><br><span class="line">            val=val*<span class="number">10</span>+s[x]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        s[x]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val*sgn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">out</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">0</span>)s+=<span class="string">&quot;+&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> s+=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">    s+=to_string(<span class="built_in">abs</span>(a));</span><br><span class="line">    <span class="keyword">if</span>(b)&#123;</span><br><span class="line">        s+=<span class="string">&quot;x&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(b!=<span class="number">1</span>)&#123;</span><br><span class="line">            s+=<span class="string">&quot;^&quot;</span>;</span><br><span class="line">            s+=to_string(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    n=s.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;x&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i)&#123;</span><br><span class="line">                a=getPre(i<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n&amp;&amp;s[i+<span class="number">1</span>]==<span class="string">&#x27;^&#x27;</span>)&#123;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">                b=getNxt(i+<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            s[i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            mp[b]+=a;</span><br><span class="line">            <span class="comment">// dbg(a,b);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// dbg(s);</span></span><br><span class="line">    <span class="built_in">map</span>&lt;ll,ll&gt; mp2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.sc)&#123;</span><br><span class="line">            mp2[i.fs<span class="number">-1</span>]+=i.fs*i.sc;</span><br><span class="line">            <span class="keyword">if</span>(mp2[i.fs<span class="number">-1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                mp2.erase(i.fs<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mp=mp2;</span><br><span class="line">    <span class="comment">// for(auto i:mp)&#123;</span></span><br><span class="line">    <span class="comment">//     dbg(i.fs,i.sc);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span>(!mp.size())<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:mp)&#123;</span><br><span class="line">        ll a=it.sc;</span><br><span class="line">        ll b=it.fs;</span><br><span class="line">        <span class="built_in">string</span> s=out(a,b);</span><br><span class="line">        <span class="keyword">if</span>(!f&amp;&amp;s[<span class="number">0</span>]==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">            s.erase(s.begin());</span><br><span class="line">        &#125;</span><br><span class="line">        f=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="E-构造"><a href="#E-构造" class="headerlink" title="E 构造"></a>E 构造</h1><p>原问题等价于给树上的每条边确定一个方向使得有最多的边满足入度=出度（称其为平衡），其拓扑序即为答案。</p><p>首先如果一个点的度为奇数显然不可能平衡，那么我们只需要考虑使度数为偶的点平衡。</p><p>先只考虑所有度数为偶数的点组成的图$G’$，一个显然的结论是，只要这张图所有点的入/出度都不大于其度数的一半，则所有点一定能被平衡（用度数为奇数的点调整），所以怎么舒服怎么写就可以了。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,l[N],r[N],d[N],c[N],vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N],R[N],res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[v]||d[v]%<span class="number">2</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(l[u]&lt;d[u]/<span class="number">2</span>)&#123;</span><br><span class="line">            R[u].push_back(v);</span><br><span class="line">            l[u]++,r[v]++,c[v]++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            R[v].push_back(u);</span><br><span class="line">            r[u]++,l[v]++,c[u]++;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;u++,v++;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">        d[u]++,d[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i]%<span class="number">2</span>)d[i]=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i]%<span class="number">2</span>||vis[i])<span class="keyword">continue</span>;</span><br><span class="line">        dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i]%<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j:G[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[j]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(r[j]&lt;d[j]/<span class="number">2</span>)&#123;</span><br><span class="line">                        r[j]++,c[j]++;</span><br><span class="line">                        R[i].push_back(j);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        l[j]++,c[i]++;</span><br><span class="line">                        R[j].push_back(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!c[i])&#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        <span class="keyword">int</span> t=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt&lt;n)<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:R[t])&#123;</span><br><span class="line">            c[i]--;</span><br><span class="line">            <span class="keyword">if</span>(!c[i])&#123;</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="F-adhoc"><a href="#F-adhoc" class="headerlink" title="F adhoc"></a>F adhoc</h1><p>考虑把原来的操作2转化一下。可以发现，操作2等价于把矩阵的最后一列往下，然后整列插到第一列前面。</p><p>因此我们可以记录一下哪里是当前矩阵的最后一列，每次操作2不做实质上的移动，只维护最后一列的位置，然后$O(n)$将最后一列往下移动。注意此时操作1也要根据最后一列的位置调整修改的坐标。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[N][N],ans,X[N],Y[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[x][y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(X[x]==n)ans--;</span><br><span class="line">        <span class="keyword">if</span>(Y[y]==n)ans--;</span><br><span class="line">        X[x]--,Y[y]--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[x][y]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    a[x][y]=b;</span><br><span class="line">    <span class="keyword">if</span>(b)&#123;</span><br><span class="line">        X[x]++,Y[y]++;</span><br><span class="line">        <span class="keyword">if</span>(X[x]==n)ans++;</span><br><span class="line">        <span class="keyword">if</span>(Y[y]==n)ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            a[i][j]=s[j<span class="number">-1</span>]==<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            X[i]+=a[i][j];</span><br><span class="line">            Y[j]+=a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(X[i]==n)ans++;</span><br><span class="line">        <span class="keyword">if</span>(Y[i]==n)ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> R=n;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,y,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;b;</span><br><span class="line">            y=R+y;</span><br><span class="line">            <span class="keyword">if</span>(y&gt;n)y-=n;</span><br><span class="line">            del(x,y);</span><br><span class="line">            add(x,y,b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">2</span>;i--)&#123;</span><br><span class="line">                del(i,R);</span><br><span class="line">                add(i,R,a[i<span class="number">-1</span>][R]);</span><br><span class="line">            &#125;</span><br><span class="line">            del(<span class="number">1</span>,R);</span><br><span class="line">            add(<span class="number">1</span>,R,b);</span><br><span class="line">            R--;</span><br><span class="line">            <span class="keyword">if</span>(!R)R=n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin&gt;&gt;T;</span></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="G-重链剖分-线段树"><a href="#G-重链剖分-线段树" class="headerlink" title="G 重链剖分 线段树"></a>G 重链剖分 线段树</h1><p>一道比较直球的数据结构题，给一棵带点权的树，需要支持：</p><ol><li>询问任意两点路径上的权值和</li><li>对任意子树增加一个关于深度的等差数列</li></ol><p>涉及动态子树加+维护树上路径和，显然得套个重链剖分，假设我们能用线段树维护每条链的结果，这样1就解决了。</p><p>考虑2操作在一条链上如何维护，即如何在数组上实现区间加等差数列+询问区间和。可以发现等差数列是可以合并的，我们可以将加在$i\in[l,r]$上的等差数列$s+(i-l)\times d$移动一下，转化为$(s-l\times d)+(i\times d)$，如此我们就能把整个数组分成两部分信息维护（设其为$a$和$b$）并且预处理出线段树上每个区间的$\sum i$，每次区间加操作时，对于当前节点就有$a+=(s-l\times d),\ b+=(\sum i)\times d$。</p><p>转换到树上，就相当于把上面的$i$全都改成$i$节点的深度。dfs序建线段树然后维护等差数列拆出来的两部分，每次询问$(u,v)$再拆成$query(v)+query(u)-2\times query(lca(u,v))+w_{lca(u,v)}$，$query(u)$表示从$u$到根的路径和，处理时直接暴力往根跳最多$\log$条链到根，每次在线段树上询问一段连续dfs序的和。总复杂度$O(n\log^2 n)$。</p><p><strong>会爆ll，要用__int128</strong></p><p><del>写起来真的恶心 都算得上是大模拟了</del></p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">namespace</span> HLD&#123;</span><br><span class="line">    <span class="keyword">int</span> n,dep[N],fa[N],sz[N],son[N],top[N],id[N],rev[N],tot;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        sz[u]=<span class="number">1</span>;</span><br><span class="line">        dep[u]=dep[fa[u]]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(v==fa[u])<span class="keyword">continue</span>;</span><br><span class="line">            fa[v]=u;</span><br><span class="line">            dfs1(v);</span><br><span class="line">            sz[u]+=sz[v];</span><br><span class="line">            <span class="keyword">if</span>(sz[son[u]]&lt;sz[v])son[u]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">        id[u]=++tot;</span><br><span class="line">        rev[tot]=u;</span><br><span class="line">        top[u]=tp;</span><br><span class="line">        <span class="keyword">if</span>(son[u])dfs2(son[u],tp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(v==fa[u]||v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">            dfs2(v,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tu=top[u],tv=top[v];</span><br><span class="line">        <span class="keyword">while</span>(tu!=tv)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[tu]&lt;dep[tv])v=fa[tv],tv=top[v];</span><br><span class="line">            <span class="keyword">else</span> u=fa[tu],tu=top[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> HLD;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> lson o&lt;&lt;1,l,mid</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rson o&lt;&lt;1|1,mid+1,r</span></span><br><span class="line">    ll a[N&lt;&lt;<span class="number">2</span>],b[N&lt;&lt;<span class="number">2</span>],aa[N&lt;&lt;<span class="number">2</span>],bb[N&lt;&lt;<span class="number">2</span>],s[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">        a[o]=a[o&lt;&lt;<span class="number">1</span>]+a[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        b[o]=b[o&lt;&lt;<span class="number">1</span>]+b[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        aa[o]=bb[o]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            a[o]=<span class="number">0</span>,b[o]=<span class="number">0</span>,s[o]=dep[rev[l]];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">        s[o]=s[o&lt;&lt;<span class="number">1</span>]+s[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        pushup(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll A,ll B)</span></span>&#123;</span><br><span class="line">        a[o]+=A*(r-l+<span class="number">1</span>);</span><br><span class="line">        b[o]+=B*s[o];</span><br><span class="line">        aa[o]+=A;</span><br><span class="line">        bb[o]+=B;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        pd(lson,aa[o],bb[o]);</span><br><span class="line">        pd(rson,aa[o],bb[o]);</span><br><span class="line">        aa[o]=bb[o]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,ll A,ll B)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">            pd(o,l,r,A,B);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(o,l,r);</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)update(lson,L,R,A,B);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)update(rson,L,R,A,B);</span><br><span class="line">        pushup(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,ll res=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> a[o]+b[o];</span><br><span class="line">        pushdown(o,l,r);</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)res+=query(lson,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)res+=query(rson,L,R);</span><br><span class="line">        <span class="comment">// dbg(l,r,res);</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u,ll v,ll k)</span></span>&#123;</span><br><span class="line">    <span class="comment">// dbg(v,k);</span></span><br><span class="line">    T.update(<span class="number">1</span>,<span class="number">1</span>,n,id[u],id[u]+sz[u]<span class="number">-1</span>,v,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(u)&#123;</span><br><span class="line">        res+=T.query(<span class="number">1</span>,<span class="number">1</span>,n,id[top[u]],id[u]);</span><br><span class="line">        u=fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lca=LCA(u,v);</span><br><span class="line">    <span class="keyword">return</span> calc(u)+calc(v)-calc(lca)*<span class="number">2</span>+T.query(<span class="number">1</span>,<span class="number">1</span>,n,id[lca],id[lca]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">prt</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ss;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        ss.push_back(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">    reverse(all(ss));</span><br><span class="line">    <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;id[i]&lt;&lt;&quot; \n&quot;[i==n];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,u,v,k;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;k;</span><br><span class="line">            update(u,ll(v)-ll(dep[u])*k,k);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;prt(query(u,v))&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line">        <span class="comment">//     dbg(i,T.query(1,1,n,i,i));</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="H-数学"><a href="#H-数学" class="headerlink" title="H 数学"></a>H 数学</h1><p>由于数据范围较小，可以直接模拟，从头开始到$t$时刻每次找到$C$和$A,B$相交的时间，注意处理$B$恰好到达$d$而第三个人从$A$前往$B$处的情况（<del>因为这个到结束都没改出来</del>）。本题不卡精度，很良心。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> ld EPS=<span class="number">1e-7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(ld x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;-EPS)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> x&gt;EPS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ld <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ld d,v1,v2,v3,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf%lf&quot;</span>,&amp;d,&amp;v1,&amp;v2,&amp;v3,&amp;t);</span><br><span class="line">    <span class="keyword">if</span>(sgn(v1*t-d)&gt;=<span class="number">0</span>)<span class="keyword">return</span> d;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ld p1=<span class="number">0</span>,p2=<span class="number">1</span>,p3=<span class="number">0</span>,tt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sgn(t)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">do</span>&#123;<span class="comment">//p1-&gt;p2</span></span><br><span class="line">                ld dlt=(p2-p1)/(v3-v2);</span><br><span class="line">                <span class="keyword">if</span>(sgn((tt+dlt)*v2+<span class="number">1</span>-d)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    p2=d;</span><br><span class="line">                    dlt=(p2-p1)/v3;</span><br><span class="line">                &#125;</span><br><span class="line">                dlt=min(t,dlt);</span><br><span class="line">                t-=dlt;</span><br><span class="line">                tt+=dlt;</span><br><span class="line">                p1+=dlt*v1;</span><br><span class="line">                p2=min(d,p2+dlt*v2);</span><br><span class="line">                p3+=dlt*v3;</span><br><span class="line">            &#125;<span class="keyword">while</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">do</span>&#123;<span class="comment">//p2-&gt;p1</span></span><br><span class="line">                ld dlt=(p2-p1)/(v1+v3);</span><br><span class="line">                dlt=min(t,dlt);</span><br><span class="line">                t-=dlt;</span><br><span class="line">                tt+=dlt;</span><br><span class="line">                p1+=dlt*v1;</span><br><span class="line">                p2=min(d,p2+dlt*v2);</span><br><span class="line">                p3-=dlt*v3;</span><br><span class="line">            &#125;<span class="keyword">while</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10lf&quot;</span>,solve());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="I-网络流"><a href="#I-网络流" class="headerlink" title="I 网络流"></a>I 网络流</h1> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="J-计算几何"><a href="#J-计算几何" class="headerlink" title="J 计算几何"></a>J 计算几何</h1><p>牛逼防AK计算几何，扔了。</p><h1 id="K-树状数组"><a href="#K-树状数组" class="headerlink" title="K 树状数组"></a>K 树状数组</h1><p>题意就是求对于所有红点求出其到最近的蓝点的曼哈顿距离之和。</p><p>考虑两点曼哈顿距离的公式$|x_1-x_2|+|y_1+y_2|$，实际上拆开绝对值符号一共有四种情况，以$x_1-x_2+y_1-y_2$为例：</p><p>我们先按照$x$坐标排序，枚举$x_1$同时用树状数组维护下标为$y_2$时的贡献（$-y_2-x_2$），因为是按$x$升序排序，可以保证$x_1\le x_2$，在树状数组上查询所有不大于$y_1$的点中的最小值更新答案即可。对于其他拆绝对值的方式，实际上可以将所有点绕原点旋转90度然后复用上面的方法。</p><p>（拆绝对值的四种情况对应到图象上就是$2$相对$1$的四个象限）</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll LINF=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,id,t;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        y=-y;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t.x)<span class="keyword">return</span> y&lt;t.y;</span><br><span class="line">        <span class="keyword">return</span> x&lt;t.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line">    ll n,c[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _)</span></span>&#123;n=_;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)c[i]=LINF;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,ll y)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)c[x]=min(c[x],y);&#125;</span><br><span class="line">    <span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,ll res=LINF)</span></span>&#123;<span class="keyword">for</span>(;x;x-=x&amp;-x)res=min(res,c[x]);<span class="keyword">return</span> res;&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">        ans[i]=LINF;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">        p[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;<span class="number">4</span>;c++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        T.init(n+m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">            swap(p[i].x,p[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n+m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">            swap(p[i].x,p[i].y);</span><br><span class="line">            p[i].t=++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n+m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i].id&gt;n)&#123;</span><br><span class="line">                T.add(p[i].t,-p[i].x-p[i].y);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans[p[i].id]=min(ans[p[i].id],p[i].x+p[i].y+T.ask(p[i].t));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">            p[i].rot();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        res+=ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="L-dp"><a href="#L-dp" class="headerlink" title="L dp"></a>L dp</h1><p>注意到我们每次操作选取的点集可以为空，因此只要用最少的代价将这棵树调整为堆即可。</p><p>如果每次操作可以加上任意的正值，我们就可以从根dfs，每次如果当前节点小于其子树中的最大值，就要将其调整到这个值，设其差为$\Delta$。</p><p>考虑到每次加的值$x_i$是给定的，所以在调整子树的时候要用所给$x_i$组成尽可能小的合法值（即不小于$\Delta$的最小值），这就是经典背包问题了，$f_i=1/0 $表示用所给$x_i$能/否恰好组成$i$，扔到$set$里每次加的时候二分。</p><p>由于$\sum x_i\le10^6,q\le10^3$，需要跑$10^9$次，因此考虑经典$bitset$优化01背包，时间复杂度$O(\frac{10^{9}}{\omega}+n)$。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[N],b[N];</span><br><span class="line"><span class="built_in">bitset</span>&lt;1000001&gt; f;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    b[u]=a[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        b[u]=max(b[u],b[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(*se.rbegin()&lt;b[u]-a[u])&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=*se.lower_bound(b[u]-a[u]);</span><br><span class="line">    b[u]=a[u]+k;</span><br><span class="line">    ans+=b[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        f|=(f&lt;&lt;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1e6</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            se.insert(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin&gt;&gt;T;</span></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> <h1 id="M-贪心"><a href="#M-贪心" class="headerlink" title="M 贪心"></a>M 贪心</h1><p>问题转化成往图中加边$e(i,b_i)$使得整张图是个长为$n$的环且数组$b$和$a$最接近（要在和$a$的$LCP$尽量大的前提下字典序最小）。</p><p>由于要和$a$尽可能相似，我们就从头开始令$b_i=a_i$，同时将$e(i,a_i)$插入原图，用并查集维护连通性。当遇到加入$a_x$时和之前的成小于$n$的环或者$a_x$在以前出现过时，停止插入$a$序列。此时维护图中所有点数大于$1$的链，从小到大遍历$[x,n]$，每次贪心的将$i$连向最小的可以连的链尾（即为$b_i$），同时更新链尾，直到所有数都在一个长为$n$的环上。时间复杂度$O(n\log n)$。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(x...) do&#123;cout<span class="meta-string">&lt;&lt;#x&lt;&lt;&quot; -&gt; &quot;;err(x);&#125;while (0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span>... <span class="title">Ts</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(T arg, Ts... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arg&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    err(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=find(x),fy=find(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">        fa[fx]=fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,l[N],r[N],a[N];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(ss.count(a[i])||find(a[i])==find(i)&amp;&amp;ve.size()!=n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!r[j])&#123;</span><br><span class="line">                    se.insert(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x=*se.begin();</span><br><span class="line">                <span class="keyword">if</span>(se.size()&gt;<span class="number">1</span>&amp;&amp;find(j)==find(x))&#123;</span><br><span class="line">                    x=*++se.begin();</span><br><span class="line">                &#125;</span><br><span class="line">                se.erase(x);</span><br><span class="line">                <span class="keyword">if</span>(!r[j])se.insert(j);</span><br><span class="line">                ve.push_back(x);</span><br><span class="line">                r[x]=j;</span><br><span class="line">                merge(x,j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            merge(a[i],i);</span><br><span class="line">            r[a[i]]=i;</span><br><span class="line">            ve.push_back(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ss.insert(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:ve)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; \n&quot;</span>[i==ve.back()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-最短路-dp&quot;&gt;&lt;a href=&quot;#A-最短路-dp&quot; class=&quot;headerlink&quot; title=&quot;A 最短路 dp&quot;&gt;&lt;/a&gt;A 最短路 dp&lt;/h1&gt;&lt;p&gt;赛中直接每次询问暴力Dijkstra，$O(qn\log n)$就能过，属于是CF神机太快了</summary>
      
    
    
    
    <category term="个人训练" scheme="http://example.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2021CCPC广州复盘</title>
    <link href="http://example.com/2021/11/15/2021CCPC%E5%B9%BF%E5%B7%9E%E5%A4%8D%E7%9B%98/"/>
    <id>http://example.com/2021/11/15/2021CCPC%E5%B9%BF%E5%B7%9E%E5%A4%8D%E7%9B%98/</id>
    <published>2021-11-15T07:28:28.000Z</published>
    <updated>2021-11-15T08:46:56.450Z</updated>
    
    <content type="html"><![CDATA[<p>最后一场CCPC也没有金。怎么说呢，感觉pku出题稍微有点离谱，不过自己菜也是原因之一就是了。</p><h2 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a>热身赛</h2><p>队友切了AB，C是神秘计算几何板子题，数据范围和精度各种神秘，三分了一下直线最短距离，然后再次被卡，愿天堂没有计算几何。</p><p>赛后听说是POJ原题，不过还是略显离谱。<del>没想到好日子还在后面</del></p><h2 id="正式赛"><a href="#正式赛" class="headerlink" title="正式赛"></a>正式赛</h2><p>开局就是阿伟正开，我倒开，bbg看D。看了一圈题面长度、输入规模、时间限制，感觉后面没有前期题，看到F手推了前四项感觉很神秘，此时队友在看I，听说是打表题。bbg给我们灌了H的题意，貌似很cf的构造，但是榜上dirt相当高，反倒是I很像签到，阿伟于是打表秒了。</p><p>过了I之后，就是经典两路分推，bbg和阿伟讨论H的构造，我去推好像很可做的A。A写出生成函数就是$\prod_{i=1}^{n}\sum_{i=1}^{\infin}i^{c_i}x_i$前$W$项系数和，翻了波<strong>数学公式板子</strong>找到了$\sum_{i=1}^{\infin}i^kx_i=x^k\frac{d^k}{dx^k}\frac{1}{(1-x)}$，纸上推了推，发现$\frac{d^k}{dx^k}\frac{1}{(1-x)}=\frac{k}{(1-x)^{(k+1)}}$的规律，所以之前的生成函数就是$\frac{\prod_{i=1}^{n}c_ix^c_i}{(1-x)^{\sum_{i=1}^{n}c_i+1}}$，如果要求它的前$W$项之和，就等于原生成函数乘$\sum_{i=0}^{n}x_i=\frac{1}{(1-x)}$（也就是做一次前缀和）后第$W$项的系数。</p><p><strong>然后我就不会求了</strong></p><p>（现在想想只觉得离谱，无论是考虑前缀和的贡献还是从广义二项式定理都能随便乱推，但是当时就是没想到，再加上看了眼榜还没有人过这题就错误估计了难度，扔掉后再也没想过，最难的部分被板子解决了，却卡在临门一脚。感觉对我来说可能是这场最遗憾的事情了。）</p><p>此时H交一发wa了，听说check没问题，说明是有方案的情况时输出了$NO$，问了下当仅存在两个$0$的时候被判作无解了，在纸上乱写时搞出了一组方案，然后阿伟改改ac了。</p><p>看了下榜只有C和F看起来可做，而且F的通过率极高，于是打算一起搞C。我看了下时间限制和下面的神秘快读，<strong>断定这题是在卡非线性做法</strong>（事实证明如果队友真信了去搞线性做法，我队可能就又铜了），先跟队友讨论了一波二分check方法，突然不知道为啥去看了眼F，此时F大概是过了三四队。</p><p>想了想，为啥出题人会放个这么奇怪的公式，而且通过clarification才说清楚$f_n$是不是有标号树的计数，然后把$f_1=a,f_2=b$代入算了下$n=2$的答案，发现刚好能通分到$\frac{a-b}{a-b}=1$，于是猜想<strong>答案可能是个定值或者只和$n$有关</strong>，<strong>然后做了个逆天决策</strong>：</p><p><strong>设$f_1=a,f_2=b,f_3=c$，然后在纸上通分出结果</strong></p><p>（现在想想这个问题很大，如果是猜测的话为啥不直接代入任意值代码跑一下，反正现在队友在讨论C没人上机，一下跑出来后还能多出至少半小时想K或A）</p><p>纸上写了半小时多，发现$n=3$时答案是$2$，然后让阿伟敲了个暴力，代入了$f_i=i,f_i=2*i,f_i=n+1-i$，发现都是斐波那契，遂一发ac，此时是第11个过F的队。</p><p>然后我继续去看K，C直接被阿伟一发二分答案ac，只跑了0.1s，属实离谱，不知道出题人为啥装出一副要卡log的样子。<strong>K一看就是绝活莫反，但是此时我又开始神志不清了</strong>，推了一波不考虑$lcm\ge p$的式子，上去敲了一发结果没过第二个样例（$p=1$），太久没碰到莫反迟钝了，看着自己以前的写的东西重推了两遍式子，发现是只算了方案数，改了改过了样例。</p><p><strong>然后就是在电脑面前不知道怎么满足lcm的限制直到比赛结束</strong></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>桂林：我超，没有数学题，挂机了</p><p>广州：我超，全是数学题，挂了</p><p>Final Fantasy的数学手，和其他队伍比起来还是太弱了。要是我再强一点，会不会有A的一血？会不会能在封榜后的1h中做出K？会不会在最后一场正式CCPC比赛中拿到金牌？还是那句话，电子竞技，菜是原罪。</p><p>自己最大的问题还是没有经过系统性的学习，只是靠着自欺欺人的所谓天赋，通过偶尔找一些资料看看、随便学一些结论、模仿着博客推一些公式来提高自己的数学水平。太多时间被浪费在没有意义的速成中，不如多花时间读读书。</p><p>CCPC金已经没了，剩下可能达到的只有CF上红了，希望毕业之前可以达到目标。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最后一场CCPC也没有金。怎么说呢，感觉pku出题稍微有点离谱，不过自己菜也是原因之一就是了。&lt;/p&gt;
&lt;h2 id=&quot;热身赛&quot;&gt;&lt;a href=&quot;#热身赛&quot; class=&quot;headerlink&quot; title=&quot;热身赛&quot;&gt;&lt;/a&gt;热身赛&lt;/h2&gt;&lt;p&gt;队友切了AB，C是神秘</summary>
      
    
    
    
    <category term="比赛记录" scheme="http://example.com/categories/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="比赛记录" scheme="http://example.com/tags/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>2021江西省赛</title>
    <link href="http://example.com/2021/11/10/2021%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B/"/>
    <id>http://example.com/2021/11/10/2021%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B/</id>
    <published>2021-11-10T09:38:18.000Z</published>
    <updated>2021-11-12T14:21:34.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="F-Four-Column-Hanoi-Tower"><a href="#F-Four-Column-Hanoi-Tower" class="headerlink" title="F. Four Column Hanoi Tower"></a>F. Four Column Hanoi Tower</h2><p>dp，找规律。首先汉诺塔为三列时$ans_x=2^{x}-1$。考虑往外放一层之后，接下来最下面的几层只能按照三列的规则移动，进而当往外放$k$</p><h2 id="G-Magic-Number-Group"><a href="#G-Magic-Number-Group" class="headerlink" title="G. Magic Number Group"></a>G. Magic Number Group</h2><p>莫队。首先线性筛$O(n\log n )$分解一下每个数的质因子，然后unique一下防止算重，然后就是边莫队边维护区间众数。用$c_i$表示质因子$i$的出现次数，$d_i$表示$\sum_{i=1}^{max}[c_k=i]$，用一个指针维护当前最大非零$d_i$（就是答案）。考虑加入一个数的所有因子之后，答案最多左右变动一位，所以可以$O(不同质因子个数)$更新答案了。</p><p>（$Hile$的莫队入门题，赛中看kuangbin板子现学的，不会有人大四还不会莫队吧）</p><h2 id="J-LRU"><a href="#J-LRU" class="headerlink" title="J. LRU"></a>J. LRU</h2><p>树状数组，前缀和。根据LRU算法，设$a_i$上一次出现的位置为$p$，区间$[p,i-1]$中有$t$个不同的数，则cache大小为$[t,+\infin)$时都会命中。枚举右端点，树状数组维护一下不同的数，然后前缀和一下就行了。</p><p>（和前段时间某场周赛的M题，就是求区间出现次数为偶数的数的异或和那题，几乎一模一样，补了题赛中还没过就该检讨了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;F-Four-Column-Hanoi-Tower&quot;&gt;&lt;a href=&quot;#F-Four-Column-Hanoi-Tower&quot; class=&quot;headerlink&quot; title=&quot;F. Four Column Hanoi Tower&quot;&gt;&lt;/a&gt;F. Four Co</summary>
      
    
    
    
    <category term="个人训练" scheme="http://example.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2021CCPC桂林复盘</title>
    <link href="http://example.com/2021/11/08/2021CCPC%E6%A1%82%E6%9E%97%E5%A4%8D%E7%9B%98/"/>
    <id>http://example.com/2021/11/08/2021CCPC%E6%A1%82%E6%9E%97%E5%A4%8D%E7%9B%98/</id>
    <published>2021-11-08T06:51:18.000Z</published>
    <updated>2021-11-08T08:06:24.291Z</updated>
    
    <content type="html"><![CDATA[<p>晚节不保了，没想到大四了还会打铜。。。</p><h2 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a>热身赛</h2><p><del>热身赛开场前5min，有人还在玩蜘蛛纸牌，我不说是谁</del></p><p>签的很快，顺便测了下评测机速度，小常数4e8跑了2s左右，感觉很合理，可惜的是一道思路正确的C没写完，赛后得知是澳门原题，阿伟改了改交上去a了。热身赛时发挥差强人意，感觉照这个状态怎么说保底也有银，当晚打了下自己的所有板子，盲猜明天至少出一道多项式or莫反（然后就被出题组counter了）。</p><p><strong>插曲</strong>：由于众所周知的原因，正赛前一晚睡眠不足，就此埋下了伏笔。</p><h2 id="正式赛"><a href="#正式赛" class="headerlink" title="正式赛"></a>正式赛</h2><p>开场bbg飞速读题并a了两道签到，此时全场rank2，我读完G和阿伟交流了下感觉可做，稍微讨论就有了二分答案然后check的方法，然后阿伟上机1a。期间D过的也多起来了，但是听完题意后想不到靠谱的方法，也没有什么通用的构造方法，和bbg相互hack各种做法后打算上去写个对拍，此时bbg灌了下E的题意和做法，证明了一下就让阿伟去写了，<strong>此时还是不会D</strong>。</p><p>关键的转折就是阿伟上机写$E$的过程中，bbg给我灌了F的题意，我听完：这不是丝薄题吗，然后就打算让主代码手阿伟上去写，<strong>完全没注意题面里$10^9$的值域和$10^{-9}$的精度要求</strong>。等到E过了，给阿伟说了下F做法，阿伟又简化了一波。此时bbg在冲D​，我读了下B感觉可做，由于D没过也没有细想，<strong>但是D怎么想都不会</strong>。</p><p>大概开始后3h，F交上去wa了，我造了组hack数据给$ZAwei$调，然后上去写了个D的暴力对拍。$Boboge$写完后好像没拍出问题，交上去re了，发现是vector为0时访问了pos[0]，交上去又wa，然后各种修改，期间$ZAwei$也改出来了，出了好几组数据发现都没问题，于是怀疑<strong>被卡精度了</strong>。</p><p>封榜后，bbg改了改上一发代码就过了D，是个很玄学的贪心，俺属实不会。此时杂威疯狂改精度（从$10^{-6}$改到$10^{-30}$，long double也上了还是wa麻了，<strong>此时Hile在挂机</strong>。bbg说会了B，说了做法但是<strong>我开始混乱了没怎么听</strong>，<strong>继续挂机</strong>，bbg上去写了但是没写完，直接打铜。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>感觉这场最大的失误就是上了F的当，虽然这道题开的早做法也显然，但是在<strong>全队写计算几何只会用模板</strong>且<strong>榜上dirt率高过题人数少</strong>的情况写这题，属实是错误的决策。而且，由于平时校内训练简单场顺风局打多了，面对中后期的决策失误无法冷静换题或重构。</p><p>就我个人而言，这场属实没啥作用，由于平时组队赛只负责做一些偏难的数学和构造题，而且主要是推公式而不是上机写代码，导致全面性降低，碰到自己不擅长的贪心和数据结构几乎没有想法，全程挂机。接下来平时自己需要多进行一些额外的个人训练了，比如vp几场gym保持个人的全面能力。</p><p><strong>电子竞技，菜是原罪。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;晚节不保了，没想到大四了还会打铜。。。&lt;/p&gt;
&lt;h2 id=&quot;热身赛&quot;&gt;&lt;a href=&quot;#热身赛&quot; class=&quot;headerlink&quot; title=&quot;热身赛&quot;&gt;&lt;/a&gt;热身赛&lt;/h2&gt;&lt;p&gt;&lt;del&gt;热身赛开场前5min，有人还在玩蜘蛛纸牌，我不说是谁&lt;/del&gt;&lt;/</summary>
      
    
    
    
    <category term="比赛记录" scheme="http://example.com/categories/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="比赛记录" scheme="http://example.com/tags/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>2018CCPC桂林</title>
    <link href="http://example.com/2021/11/03/2018CCPC%E6%A1%82%E6%9E%97/"/>
    <id>http://example.com/2021/11/03/2018CCPC%E6%A1%82%E6%9E%97/</id>
    <published>2021-11-03T14:16:04.000Z</published>
    <updated>2021-11-03T16:54:59.028Z</updated>
    
    <content type="html"><![CDATA[<p>泪目了，学多项式以来，第一次在赛中做出多项式题，乌乌。</p><h2 id="A-Array-Merge"><a href="#A-Array-Merge" class="headerlink" title="A. Array Merge"></a>A. Array Merge</h2><p>贪心。听说是原题，现场的THU13min就过了，待补。</p><h2 id="B-Array-Modify"><a href="#B-Array-Modify" class="headerlink" title="B. Array Modify"></a>B. Array Modify</h2><p>NTT，生成函数。</p><p>【前置芝士：生成函数，多项式乘法\&amp;求逆\&amp;求ln\&amp;求exp】</p><p>观察or打表可以发现从某个位置开始，所有后继的贡献的生成函数为$(1+x+x^2+x^3+…+x^{L-1})^m$，</p><p>因此考虑求前$L$项为$1$的多项式$G(x)$的$m$次方，显然有$G(x)^m=e^{m\ln G(x)}$，套板子的事，复杂度$O(n\log n)$（如果用快速幂的方法求$G(x)^m$，复杂度是$O(n\log^2n)$，因为每次多项式乘法是$O(n\log n)$的），</p><p>设$F(x)=a_0+a_1x+a_2x^2+…+a_{n-1}x^{n-1}$，求出$H(x)=G(x)^m=b_0+b_1x+b_2x^2+…+b_{n-1}x^{n-1}$之后，最后输出的第$p$位即为$\sum_{i=0}^{n-p-1}a_{p+i}b_i$，</p><p>考虑将$H(x)$的前$L$项取反，变为$H’(x)=b_{n-1}+b_{n-2}x+…+b_0x^{n-1}$，</p><p>此时第$p$位的值就是一个卷积：$\sum_{i=0}^{n-p-1}a_{p+i}b_{n-1-i}$（此时$p+i+n-1-i=p+n-i$），</p><p>因此再对$F(x)$和$H’(x)$做一次多项式乘法，依次输出$n$到$2n-1$项就是答案辣。</p><p>【多项式题都是老套路了，建议是去学学，真没那么难，只要会推式子当成黑盒就行。】</p><p>【类比一下：多项式$::$网络流，推柿子$::$建图，<strong>一般来说</strong>不需要明白黑盒里面的原理（当然最好是能搞明白原理）】</p><h2 id="G-Greatest-Common-Divisor"><a href="#G-Greatest-Common-Divisor" class="headerlink" title="G. Greatest Common Divisor"></a>G. Greatest Common Divisor</h2><p>数论。首先根据欧几里得定理，我们有：</p><p>$\gcd(a_1,a_2,…a_n)=\gcd(a_1,a_2-a_1,…,a_n-a_1)$，</p><p>对于本题来说$a_i-a_1$是不变的，所以可以枚举所有$t|\gcd(a_2-a_1,a_3-a_1,…,a_n-a_1)$，求出满足$t|a_1+k$的最小的$k$即可。</p><h2 id="H-Hamming-Distance"><a href="#H-Hamming-Distance" class="headerlink" title="H. Hamming Distance"></a>H. Hamming Distance</h2><p>贪心。题解可能相对长，明天写。</p><h2 id="J-Stone-Game"><a href="#J-Stone-Game" class="headerlink" title="J. Stone Game"></a>J. Stone Game</h2><p>博弈。这题其实不算啥博弈，实际上最终状态一定是由所有数的相对大小关系确定的，所以答案之和最终状态总数和初始总数之差的奇偶性有关。</p><p>从前到后扫一遍$f_i=max(a_i&gt;a_{i-1}?f_{i-1}+1:0,f_i)$</p><p>从后到前扫一遍$f_i=max(a_i&gt;a_{i+1}?f_{i+1}+1:0,f_i)$</p><p>即可求出最终状态。</p><h2 id="L-Two-Ants"><a href="#L-Two-Ants" class="headerlink" title="L. Two Ants"></a>L. Two Ants</h2><p>计算几何。听队友说就是抄一堆板子+分类讨论，待补。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;泪目了，学多项式以来，第一次在赛中做出多项式题，乌乌。&lt;/p&gt;
&lt;h2 id=&quot;A-Array-Merge&quot;&gt;&lt;a href=&quot;#A-Array-Merge&quot; class=&quot;headerlink&quot; title=&quot;A. Array Merge&quot;&gt;&lt;/a&gt;A. Array Me</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>NTU Preliminary 2021</title>
    <link href="http://example.com/2021/11/03/NTU-Preliminary-2021/"/>
    <id>http://example.com/2021/11/03/NTU-Preliminary-2021/</id>
    <published>2021-11-03T14:15:42.000Z</published>
    <updated>2021-11-03T16:22:18.909Z</updated>
    
    <content type="html"><![CDATA[<p>离谱，这场又突破了过题数下限，NTU的预选赛就这么难，不愧是今年final拿牌的学校。</p><h2 id="C-Perfect-Cactus"><a href="#C-Perfect-Cactus" class="headerlink" title="C. Perfect Cactus"></a>C. Perfect Cactus</h2><p>tarjan。题意就是判断仙人掌中是否有大于$3$的奇环，tarjan跑出点双联通分量判断一下就行。</p><p>（题面巨长巨复杂，有用的就一句话）</p><h2 id="D-String-Repetition"><a href="#D-String-Repetition" class="headerlink" title="D. String Repetition"></a>D. String Repetition</h2><p>AC自动机。又是瓜队绝活题，差点被爆杀，待补。</p><h2 id="E-Identity-Subset"><a href="#E-Identity-Subset" class="headerlink" title="E. Identity Subset"></a>E. Identity Subset</h2><p>很早就被开出来但是我们直到最后也没过，感觉是用牛逼性质降低复杂度的暴力，待补。</p><h2 id="I-Road-Reconstruction"><a href="#I-Road-Reconstruction" class="headerlink" title="I. Road Reconstruction"></a>I. Road Reconstruction</h2><p>网络流。首先这个<strong>数据范围</strong>，这个<strong>度数限制</strong>，这个<strong>最小代价</strong>，显然是<strong>费用流</strong>。</p><p>考虑图中的边一共有三类：</p><ul><li>被反转，代价为$a_i$</li><li>被删除，代价为$b_i$</li><li>不操作，代价为$0$</li></ul><p>显然，三类边的总和为$m$，考虑如何建图以用流量控制点的入度不大于$k$，</p><p>可以发现，三类边会给连接的点以不同方法改变入度，因此建图方法也出来了：</p><ul><li>新建一个点$V$连向汇点，流量$inf$费用$0$，表示被删除的边。</li><li>对于每个边$i(u,v)$设置一个点$x_i$，从源点连一条流量$1$费用的边<ul><li>向$u$点连一条流量$1$费用$a_i$的边，表示$i$被反转</li><li>向$V$点连一条流量$1$费用$b_i$的边，表示$i$被删除</li><li>向$v$点连一条流量$1$费用$0$的边，表示$i$不操作</li></ul></li><li>从源点向每个$x_i$连一条流量$1$度数</li><li>对于每个表示原图中点的点向汇点连一条流量$k$费用$0$的边以控制入度</li></ul><p>这样建出来的图其实很简单，从源点到汇点跑一遍MCMF，所需费用就是答案。</p><h2 id="J-Hot-Potato"><a href="#J-Hot-Potato" class="headerlink" title="J. Hot Potato"></a>J. Hot Potato</h2><p>状压dp。考虑用$f_{bit,i}$表示到达状态$bit$且在第$i$位时的概率，其中$bit$是压缩后的各点状态，$1$表示已经到达过了。</p><p>签到级别的dp，注意逆元要提前算出来不然会TLE。</p><p>（这题还是有点卡常的，可以换C++20(64 bits)交）</p><h2 id="K-This-is-a-Game"><a href="#K-This-is-a-Game" class="headerlink" title="K. This is a Game"></a>K. This is a Game</h2><p>博弈，差分前缀和。通过打表or推状态能发现$SG_k(a_i)=\lfloor\log_{k}a_i\rfloor$，</p><p>【前置芝士：我们用$SG$函数来衡量一个公平博弈局面的状态，一个先手必败态的$SG$值为$0$，一个状态的$SG$值是它所有后继状态的$SG$值的$mex$，多个相互独立的游戏的$SG$值是这些游戏各自$SG$值的异或和】</p><p>因此，当且仅当存在一个$2\le k\le a_{min}$使得所有$SG_k(a_i)$异或和为$0$时，后手必胜。</p><p>由于$k$可能有$10^{15}$，显然不能枚举，所以反向考虑：</p><p>显然$SG(a_i)\le \log_210^{15}\le60$，因此对每个$a_i$，仅存在最多$60$个的$k$的取值区间使得$SG(a_i)$不同，也就是说，我们只需要枚举最多不到$60n$个$k$的取值然后判断所有区间是否为$0$。</p><p>显然当$O(60n^2)$还是会TLE，然后再反向考虑一下（！了转反）：</p><p>如果对上述的每一个区间异或上对应的$SG_k(a_i)$，最后只要判断是否存在一个点的值为$0$就行了：</p><p>先离散化，然后差分更新区间，最后前缀和，游戏结束。</p><p>【冷知识：不只是加法和异或，只要是有结合律（$(a?b)?c=a?b?c=a?(b?c)$）和逆元（对于任意的$a$，存在$b$使得$a?b=o$，$o$是运算的单位元）的运算$’?’$都可以使用差分前缀和，以及树状数组等。有兴趣的话可以去学学抽象代数相关知识】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;离谱，这场又突破了过题数下限，NTU的预选赛就这么难，不愧是今年final拿牌的学校。&lt;/p&gt;
&lt;h2 id=&quot;C-Perfect-Cactus&quot;&gt;&lt;a href=&quot;#C-Perfect-Cactus&quot; class=&quot;headerlink&quot; title=&quot;C. Perfec</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2020 ICPC Taipei-Hsinchu Site</title>
    <link href="http://example.com/2021/11/03/2020-ICPC-Taipei-Hsinchu-Site/"/>
    <id>http://example.com/2021/11/03/2020-ICPC-Taipei-Hsinchu-Site/</id>
    <published>2021-11-03T14:14:44.000Z</published>
    <updated>2021-11-04T06:28:50.358Z</updated>
    
    <content type="html"><![CDATA[<p>这场题是可以，就是数据范围有点微妙，不知道出题人是不怕卡常还是太相信现场判题机。</p><p>以后集训队内都过掉的签到就不写题解了，只写一些有价值的题目。</p><h2 id="C-Pyramid"><a href="#C-Pyramid" class="headerlink" title="C. Pyramid"></a>C. Pyramid</h2><p>dp。考虑每个位置为$L$当且仅当这个位置被经过偶数次，所以可以通过求出每一层中所有位置被走过的人数来判断每个位置的朝向，同时记录第$k$个球的位置以确定答案。</p><p>假设当前点走过了$x$人，则有$\lceil\frac{x}{2}\rceil$人往左，$\lfloor\frac{x}{2}\rfloor$人往右，用$f_{i,j}$记录第$i$层第$j$个位置有多少人走过，然后$O(1)$转移到下一层。</p><p>（总复杂度算了算是$O(1e9)$左右，赛中感觉$3s$能过就莽了，没想到就跑了不到$2s$）</p><h2 id="E-A-Color-Game"><a href="#E-A-Color-Game" class="headerlink" title="E. A Color Game"></a>E. A Color Game</h2><p>区间dp。一看范围$n,m\le500$，$7$种颜色的区间消除操作，盲猜一波$O(7n^3)$的区间dp。</p><p>从时间复杂度上自然想到状态可能是$f_{l,r,k}$表示$l,r$内第$k$种颜色的xxx值。由于区间消除的性质，考虑如果$[l,r]$可以消除，那么的前一个状态先消到只剩一种颜色，且这种颜色数量不小于$m$。所以其实$f_{i,j,k}$表示的就是区间$[l,r]$中如果只剩$k$，最大能剩多少个（如果不剩就用$-1$表示）。</p><p>有一点需要注意，当$f_{l,r,k}\ge m$时，要把其他颜色的$f_{l,r,k’}$设为$max(f_{i,j,k’},0)$，以防止两个不同色可消区间合并出现问题。</p><p>最终复杂度为$O(7n^3)$。</p><h2 id="F-Cable-Protection"><a href="#F-Cable-Protection" class="headerlink" title="F. Cable Protection"></a>F. Cable Protection</h2><p><del>贪心</del> dp。<strong>血的教训2：能dp就不要贪心</strong></p><p>题意就是求基环数上半径为1的最小点覆盖，首先考虑环上的每一棵子树做一遍树形dp，$f_{i,0/1}$表示$i$点选或不选的最小代价，然后考虑环上的点也是两个状态，用类似的方法dp即可。</p><p>（这场怎么这么多dp）</p><h2 id="G-Graph-Cards"><a href="#G-Graph-Cards" class="headerlink" title="G. Graph Cards"></a>G. Graph Cards</h2><p>树哈希，最小表示法。</p><p>【前置芝士：就是上面两个东西】</p><p>看到题自然能想到要用哈希之类的方法记录环上子树的状态，然后再对环再进行哈希（此时环上每个点代表子树的哈希值），</p><p>对于树，我们有以下两种较好的方法进行树哈希：</p><ul><li>$f_u=1+\sum_{son(u,v)}f_v\times p_{s_v}$</li><li>$f_u=\prod_{son(u,v)}(f_v+p_{s_v})$</li></ul><p>其中$s_u$表示$u$的子树大小，$p_i$表示第$i$个素数。</p><p>如果要判断环同构的话，就是最小表示法裸题了，详见oi-wiki。</p><p>题外话：我超，出题人未免太能卡了，同时用了两种树哈希+环上双哈希+瞎搞（反转$1$到$1e6$的素数）wa了10发才过，$1e6$的在各种哈希和处理下跑了快$3s$。。。</p><h2 id="I-Critical-Structures"><a href="#I-Critical-Structures" class="headerlink" title="I.  Critical Structures"></a>I.  Critical Structures</h2><p>tarjan。赛中队友过了，待补，听说是<strong>题意不清</strong>的tarjan板子题。</p><h2 id="K-Number-with-Bachelors"><a href="#K-Number-with-Bachelors" class="headerlink" title="K. Number with Bachelors"></a>K. Number with Bachelors</h2><p>组合。对于所有询问，十进制十六进制处理起来没啥区别，而当你可以求出第$k$大合法数字时，同样可以二分求出$[l,r]$区间内的合法数字个数，反之亦然，所以等价于只有一种询问（求第$k$大合法数字）。</p><p>就十进制来说，显然长度为$x$的数有$9\times{9\choose x-1}\times(x-1)!$种选择方法，因此可以确定第$k$大合法数字的长度$L$，然后就参考这个方法，每次确定一位直到$L$。</p><p>C++读入和输出$16$进制的一个小trick：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;hex&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n;</span><br><span class="line"><span class="comment">//[in]: 1d4b42, [out]: 1919810</span></span><br><span class="line"><span class="built_in">cin</span>&lt;&lt;n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;hex&lt;&lt;n;</span><br><span class="line"><span class="comment">//[in]: 114514, [out]: 1bf52</span></span><br></pre></td></tr></table></figure><p>（赛中差一点写完，思路是从求区间个数二分出第$k$大，实际上反过来会容易一些，最后还是不够冷静啊）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这场题是可以，就是数据范围有点微妙，不知道出题人是不怕卡常还是太相信现场判题机。&lt;/p&gt;
&lt;p&gt;以后集训队内都过掉的签到就不写题解了，只写一些有价值的题目。&lt;/p&gt;
&lt;h2 id=&quot;C-Pyramid&quot;&gt;&lt;a href=&quot;#C-Pyramid&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2019CCPC哈尔滨</title>
    <link href="http://example.com/2021/11/01/2019CCPC%E5%93%88%E5%B0%94%E6%BB%A8/"/>
    <id>http://example.com/2021/11/01/2019CCPC%E5%93%88%E5%B0%94%E6%BB%A8/</id>
    <published>2021-11-01T07:42:31.000Z</published>
    <updated>2021-11-03T14:13:23.682Z</updated>
    
    <content type="html"><![CDATA[<p>离谱，不知道现场判题机究竟多快，反正A和E带log疯狂TLE产生大量垃圾时间导致打银了。</p><h2 id="A-Artful-Paintings"><a href="#A-Artful-Paintings" class="headerlink" title="A. Artful Paintings"></a>A. Artful Paintings</h2><p>差分约束。考虑将黑色位置设为$1$，否则为$0$，设到第$i$个位置的前缀和为$S_i$，则</p><ul><li>对于第一种限制，满足$S_R-S_{L-1}\ge K$</li><li>对于第二种限制，满足$S_N-S_R+S_{L-1}\ge K$，由于$S_N$有单调性，可以先二分答案。</li></ul><p>显然这是一个差分约束系统，除了上述约束外还有$0\le S_i-S_{i-1}\le1,\ 0\le S_i $，建图判断如果有负环则不合法。</p><p>（题外话：SPFA全程TLE，Bellman-Ford直接AC，关于SPFA，它死了）</p><h2 id="B-Binary-Numbers"><a href="#B-Binary-Numbers" class="headerlink" title="B. Binary Numbers"></a>B. Binary Numbers</h2><p>dp。显然，题目给出的函数$F_k(a,b)$意义就是$a$和$b$二进制$k$位的$LCP$长度，涉及到二进制$LCP$，应该能想到这是$01$字典树上的$LCA$。</p><p>【前置芝士：树上$x$个点中，$dfs$序最小和最大的两个点的$LCA$深度最小】</p><p>（放到这题里等价于任意$x$个数，最大和最小的两个数二进制$LCP$最大）</p><p>所以题目关于$F_{m-1}(A_i,k)$的那个限制就变成了</p><p>$\forall i\in[1,n]\ LCP(A_i,L_i)\ge LCP(A_{i-1},L_{i})\&amp;\&amp;LCP(A_i,R_i)\ge LCP(A_{i+1},R_{i})$</p><p>这种选一个受左右两个影响的题就是老dp了：</p><p>设$f_{i,j,k}$表示考虑前$i$个区间，$LCP(A_{i},L_{i+1})=j,LCP(A_{i},R_{i})=k$，枚举$[L_i,R_i]$区间选的数$x$，</p><p>令$a=LCP(x,L_i),b=LCP(x,R_{i-1}),c=LCP(x,L_{i+1}),d=LCP(x,R_i)$，</p><p>则当$a\ge j \&amp;\&amp; b\le k$时有转移：$f_{i-1,j,k}\longrightarrow f_{i,c,d}$</p><p>总复杂度$O(m^2\times2^m)$。</p><h2 id="C-Competition-in-Swiss-system"><a href="#C-Competition-in-Swiss-system" class="headerlink" title="C. Competition in Swiss-system"></a>C. Competition in Swiss-system</h2><p>读完题就会的大模拟，待读题。</p><h2 id="G-Game-Store"><a href="#G-Game-Store" class="headerlink" title="G. Game Store"></a>G. Game Store</h2><p>看样子好像是博弈+线性基，待补。</p><h2 id="E-Exchanging-Gifts"><a href="#E-Exchanging-Gifts" class="headerlink" title="E. Exchanging Gifts"></a>E. Exchanging Gifts</h2><p>拓扑排序，摩尔投票法。建反图求出每个第一类操作的贡献，然后map$O(n\log n)$或摩尔投票法$O(n)$求众数。设众数出现次数$x$，总数为$n$，答案为$max(0,2x-n)$。</p><h2 id="L-LRU-Algorithm"><a href="#L-LRU-Algorithm" class="headerlink" title="L. LRU Algorithm"></a>L. LRU Algorithm</h2><p>hash or 字典树。关键结论：假设LRU过程中cache长度无限，则每一个合法询问必然是LRU过程中的一个前缀。</p><p>因此可以暴力维护cache无限长的LRU过程中所有可能的字符串并存储其哈希值，由于数据是$5000\times5000$，多个log会TLE，所以不如把所有前缀都存起来，然后对于每个询问$O(n)$check，总复杂度$O(n(n+q))$。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;离谱，不知道现场判题机究竟多快，反正A和E带log疯狂TLE产生大量垃圾时间导致打银了。&lt;/p&gt;
&lt;h2 id=&quot;A-Artful-Paintings&quot;&gt;&lt;a href=&quot;#A-Artful-Paintings&quot; class=&quot;headerlink&quot; title=&quot;A. A</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2020吉林省赛</title>
    <link href="http://example.com/2021/11/01/2020%E5%90%89%E6%9E%97%E7%9C%81%E8%B5%9B/"/>
    <id>http://example.com/2021/11/01/2020%E5%90%89%E6%9E%97%E7%9C%81%E8%B5%9B/</id>
    <published>2021-11-01T07:42:17.000Z</published>
    <updated>2021-11-02T09:27:31.398Z</updated>
    
    <content type="html"><![CDATA[<p>NEERC之后的减压省赛，差点被碰到绝活题的瓜队爆杀。由于签到题太多，题解只写几道有价值的。</p><h2 id="D-Trie"><a href="#D-Trie" class="headerlink" title="D. Trie"></a>D. Trie</h2><p><strong>AC自动机fail树上dfs序建<del>可持久化</del>线段树</strong>。</p><p>考虑<strong>AC自动机的fail指针指向的一定是其后缀</strong>（瓜队：丝薄套路题），所以可以在fail树上用dfs序建一棵线段树方便更新和查询，此时</p><ul><li>对于1操作，等价于给出$k$个区间，将区间的并$+1$（多个区间取并集，不会有人不会吧）</li><li>对于2操作，等价于询问某点的值</li></ul> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q[N],dfn[N],R[N],cnt;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACAutomaton</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> trie[N][<span class="number">26</span>],tot;</span><br><span class="line">    <span class="keyword">int</span> nx[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">            nx[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">                trie[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!trie[x][y])&#123;</span><br><span class="line">            trie[x][y]=++tot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getnx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(trie[<span class="number">0</span>][i])&#123;</span><br><span class="line">                q.push(trie[<span class="number">0</span>][i]);</span><br><span class="line">                G[<span class="number">1</span>].push_back(trie[<span class="number">0</span>][i]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">            <span class="keyword">int</span> rt=q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> u=trie[rt][i],v=nx[rt];</span><br><span class="line">                <span class="keyword">if</span>(!u)&#123;</span><br><span class="line">                    <span class="comment">// trie[rt][i]=trie[nx[rt]][i];</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(u);</span><br><span class="line">                <span class="keyword">while</span>(v&amp;&amp;!trie[v][i])v=nx[v];</span><br><span class="line">                nx[u]=trie[v][i];</span><br><span class="line">                G[nx[u]+<span class="number">1</span>].push_back(u+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;AC;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    dfn[u]=++cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    R[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> lson o&lt;&lt;1,l,mid</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rson o&lt;&lt;1|1,mid+1,r</span></span><br><span class="line">    <span class="keyword">int</span> val[N&lt;&lt;<span class="number">2</span>],tag[N&lt;&lt;<span class="number">2</span>],vis[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        tag[o]=val[o]=<span class="number">0</span>,vis[o]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        tag[o]+=k;</span><br><span class="line">        val[o]+=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">        pd(o&lt;&lt;<span class="number">1</span>,tag[o]);</span><br><span class="line">        pd(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,tag[o]);</span><br><span class="line">        tag[o]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> X)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">            pd(o,X);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(o);</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)update(lson,L,R,X);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)update(rson,L,R,X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> res=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> val[o];</span><br><span class="line">        pushdown(o);</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)res+=query(lson,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)res+=query(rson,L,R);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">        p.push_back(&#123;dfn[q[i]],R[q[i]]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p.begin(),p.end());</span><br><span class="line">    <span class="keyword">int</span> L=p[<span class="number">0</span>].first,R=p[<span class="number">0</span>].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:p)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=i.first,r=i.second;</span><br><span class="line">        <span class="keyword">if</span>(i.first&gt;R)&#123;</span><br><span class="line">            S.update(<span class="number">1</span>,<span class="number">1</span>,n,L,R,<span class="number">1</span>);</span><br><span class="line">            L=i.first,R=i.second;</span><br><span class="line">        &#125;</span><br><span class="line">        R=max(R,i.second);</span><br><span class="line">    &#125;</span><br><span class="line">    S.update(<span class="number">1</span>,<span class="number">1</span>,n,L,R,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        AC.init();</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            G[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,x;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>,&amp;x,&amp;ch);</span><br><span class="line">            AC.insert(x<span class="number">-1</span>,ch-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        AC.getnx();</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        S.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> op,x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;op,&amp;x);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,q+i);</span><br><span class="line">                &#125;</span><br><span class="line">                update(x);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,S.query(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[x]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="H-Curious"><a href="#H-Curious" class="headerlink" title="H. Curious"></a>H. Curious</h2><p>数论。属于是莫反裸题了，用$c_i$表示$i$在$a$中的出现次数，则有</p><p>$\sum_{i=1}^{n}\sum_{j=1}^{n}[gcd(i,j)=x]c_ic_j$</p><p>$=\sum_{i=1}^{\frac{n}{x}}\sum_{j=1}^{\frac{n}{x}}[gcd(i,j)=1]c_{ix}c_{jx}$</p><p>$=\sum_{i=1}^{\frac{n}{x}}\sum_{j=1}^{\frac{n}{x}}\sum_{d|gcd(i,j)}\mu(d)c_{ix}c_{jx}$</p><p>$=\sum_{d=1}^{\frac{n}{x}}\mu(d)\sum_{i=1}^{\frac{n}{xd}}\sum_{j=1}^{\frac{n}{xd}}c_{ixd}c_{jxd}$</p><p>$O(n\log n)$预处理后面那一块，然后对于每一个$x$调和级数暴力算答案，总复杂度$O(n\log n)$。</p><h2 id="I-World-Tree"><a href="#I-World-Tree" class="headerlink" title="I. World Tree"></a>I. World Tree</h2><p>贪心，dp。首先考虑树形dp，但是不会处理同层子树选择的优先级，考虑最优子结构贪心：</p><p>设</p><h2 id="J-Situation"><a href="#J-Situation" class="headerlink" title="J. Situation"></a>J. Situation</h2><p>博弈，记忆化搜索。一共$2\times3^9$种状态，每种状态会转移到后继最值，复杂度$O(2\times9\times3^9)$，不熟悉的话可以补一补17女生赛的J题。</p><h2 id="M-Upanishad"><a href="#M-Upanishad" class="headerlink" title="M. Upanishad"></a>M. Upanishad</h2><p>数据结构。首先考虑如果询问改成求区间内所有出现次数为奇数的数的异或和，那么答案就是该区间的异或和，所以，$出现次数为偶数的数的异或和=区间异或和\oplus区间set的异或和$，关键就是求出区间所有数的$set$。</p><p>考虑离线，枚举区间右端点，记录某数最后出现的位置，然后更新到树状数组上同时消除之前的影响以保证每个数只会出现一次，对于每个询问用树状数组求区间异或和即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NEERC之后的减压省赛，差点被碰到绝活题的瓜队爆杀。由于签到题太多，题解只写几道有价值的。&lt;/p&gt;
&lt;h2 id=&quot;D-Trie&quot;&gt;&lt;a href=&quot;#D-Trie&quot; class=&quot;headerlink&quot; title=&quot;D. Trie&quot;&gt;&lt;/a&gt;D. Trie&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2018-2019 ICPC, NEERC, Northern Eurasia Finals</title>
    <link href="http://example.com/2021/11/01/2018-2019-ICPC-NEERC-Northern-Eurasia-Finals/"/>
    <id>http://example.com/2021/11/01/2018-2019-ICPC-NEERC-Northern-Eurasia-Finals/</id>
    <published>2021-11-01T07:41:54.000Z</published>
    <updated>2021-11-01T19:28:58.308Z</updated>
    
    <content type="html"><![CDATA[<p>加训以来打的最艰难的一场，同时也是最难补题的一场，只能说欧洲的题目风格和中国还是差别不小，尤其是代码实现上的难度。</p><h2 id="A-Alice-the-Fan"><a href="#A-Alice-the-Fan" class="headerlink" title="A. Alice the Fan"></a>A. Alice the Fan</h2><p>dp打表。19徐州打铁的教训：<strong>能暴力就不要分类讨论</strong>。</p><p>考虑$f_{a,b,c,d}$表示当前大比分为$a:b$，小比分为$c:d$时是否可行（用bool类型存储），状态数共$3\times3\times200\times200$种。预处理出一局种合法的小比分情况，显然少于$400$种，因此可以$O(400)$进行dp时转移，总复杂度大概$O(1.2\times10^8)$，同时开一个数组记录$dp$转移的路径以输出答案。</p><h2 id="B-Bitmatching"><a href="#B-Bitmatching" class="headerlink" title="B. Bitmatching"></a>B. Bitmatching</h2><h2 id="C-Cactus-Search"><a href="#C-Cactus-Search" class="headerlink" title="C. Cactus Search"></a>C. Cactus Search</h2><p>仙人掌背景的交互题，待补。</p><h2 id="D-Distance-Sum"><a href="#D-Distance-Sum" class="headerlink" title="D. Distance Sum"></a>D. Distance Sum</h2><h2 id="E-Easy-Chess"><a href="#E-Easy-Chess" class="headerlink" title="E. Easy Chess"></a>E. Easy Chess</h2><p>签到。</p><h2 id="F-Fractions"><a href="#F-Fractions" class="headerlink" title="F. Fractions"></a>F. Fractions</h2><h2 id="G-Guest-Student"><a href="#G-Guest-Student" class="headerlink" title="G. Guest Student"></a>G. Guest Student</h2><p>签到。</p><h2 id="H-Harder-Satisfiability"><a href="#H-Harder-Satisfiability" class="headerlink" title="H. Harder Satisfiability"></a>H. Harder Satisfiability</h2><h2 id="I-Interval-Free-Permutations"><a href="#I-Interval-Free-Permutations" class="headerlink" title="I. Interval-Free Permutations"></a>I. Interval-Free Permutations</h2><p>计数，析合树。</p><p>题解待补充。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">400</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,p;</span><br><span class="line">ll fac[N],f[N],g[N][N],h[N];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll n=p<span class="number">-2</span>,ll m=p)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    a%=m;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)res=res*a%m;</span><br><span class="line">        a=a*a%m,n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    n=<span class="number">400</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;p;</span><br><span class="line">    f[<span class="number">1</span>]=fac[<span class="number">0</span>]=g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        fac[i]=fac[i<span class="number">-1</span>]*i%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=i;k++)&#123;</span><br><span class="line">                g[i][j]=(g[i][j]+g[i-k][j<span class="number">-1</span>]*fac[k]%p)%p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        h[i]=fac[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            h[i]=(h[i]-h[j]*fac[i-j]%p+p)%p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i]=fac[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            f[i]=(f[i]-h[j]*<span class="number">2</span>%p*fac[i-j]%p+p)%p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">4</span>;j&lt;i;j++)&#123;</span><br><span class="line">            f[i]=(f[i]-g[i][j]*f[j]%p+p)%p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;f[n]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="J-JS-Minification"><a href="#J-JS-Minification" class="headerlink" title="J. JS Minification"></a>J. JS Minification</h2><h2 id="K-King-Kog’s-Reception"><a href="#K-King-Kog’s-Reception" class="headerlink" title="K. King Kog’s Reception"></a>K. King Kog’s Reception</h2><h2 id="L-Lazyland"><a href="#L-Lazyland" class="headerlink" title="L. Lazyland"></a>L. Lazyland</h2><p>签到。</p><h2 id="M-Minegraphed"><a href="#M-Minegraphed" class="headerlink" title="M. Minegraphed"></a>M. Minegraphed</h2><p>构造，模拟。赛中先tarjan缩点然后隔一层构造$3\times(2n+1)$的层，这层分三个部分，如图所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.............</span><br><span class="line">#+#+#+#+#+#+#</span><br><span class="line">.............</span><br></pre></td></tr></table></figure><p>其中第$1,3$行为上层的落点和去往下层的洞，利用同层’+’的位置设置DAG的可达关系。</p><p>由于写起来过于模拟导致结束前5min才过，但是赛后发现好像有缩点都不用的简单写法，补完其它题学一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;加训以来打的最艰难的一场，同时也是最难补题的一场，只能说欧洲的题目风格和中国还是差别不小，尤其是代码实现上的难度。&lt;/p&gt;
&lt;h2 id=&quot;A-Alice-the-Fan&quot;&gt;&lt;a href=&quot;#A-Alice-the-Fan&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2021山东省赛</title>
    <link href="http://example.com/2021/10/23/2021%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9B/"/>
    <id>http://example.com/2021/10/23/2021%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9B/</id>
    <published>2021-10-23T15:23:36.000Z</published>
    <updated>2021-11-01T19:00:39.760Z</updated>
    
    <content type="html"><![CDATA[<p>这场7题没啥难度，但之后是真的难开，补一道卡一道，本来是要补10题的，考虑难度和效果就改9题了。</p><h2 id="A-Beta-Go"><a href="#A-Beta-Go" class="headerlink" title="A. Beta Go"></a>A. Beta Go</h2><p>待补，详见<a href="https://waberzhuang.github.io/2021/10/17/%E7%BB%84%E9%98%9F%E8%B5%9B%E8%AE%AD%E7%BB%83/2021-%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9B/">ZAwei的博客</a>。</p><h2 id="B-Build-Roads"><a href="#B-Build-Roads" class="headerlink" title="B. Build Roads"></a>B. Build Roads</h2><p>随机化。$n$较大时答案大概率为$n-1$，较小时暴力，注意$L=R$的情况。</p><h2 id="C-Cat-Virus"><a href="#C-Cat-Virus" class="headerlink" title="C. Cat Virus"></a>C. Cat Virus</h2><p>构造。考虑对题目增加限制：要求构造出来的必须是二叉树。当某点左子树答案为$A$，右子树答案为$B$，则该点子树的答案为$A\times B+1$，只有一个孩子的结点答案是孩子的答案$+1$，所以可以递归构造出$k$。</p><h2 id="D-Dyson-Box"><a href="#D-Dyson-Box" class="headerlink" title="D. Dyson Box"></a>D. Dyson Box</h2><p>签到。考虑重力向下，第$i$列高为$h_i$，答案就是</p><p>$有方块的位置数\times2+\sum_{i=1}^{n+1}|h_i-h_{i-1}|(h_{i+1}=0)$。</p><h2 id="E-Evaluate-Expression"><a href="#E-Evaluate-Expression" class="headerlink" title="E. Evaluate Expression"></a>E. Evaluate Expression</h2><h2 id="F-Birthday-Cake"><a href="#F-Birthday-Cake" class="headerlink" title="F. Birthday Cake"></a>F. Birthday Cake</h2><p>字符串。hash老题了，考虑两个字符$a,b\ (len(a)\le len(b))$串拼接后合法的情况：</p><ul><li>$a,b$相同</li><li>$b$的前$\frac{len(a)+len(b)}{2}$个字符是拼接后串的一半</li></ul><p>$map$记录一下就行，小心被卡模数和自然溢出。</p><h2 id="G-Grade-Point-Average"><a href="#G-Grade-Point-Average" class="headerlink" title="G. Grade Point Average"></a>G. Grade Point Average</h2><p>签到。</p><h2 id="H-Adventurer’s-Guild"><a href="#H-Adventurer’s-Guild" class="headerlink" title="H. Adventurer’s Guild"></a>H. Adventurer’s Guild</h2><p>签到。</p><h2 id="I-Chemical-Code"><a href="#I-Chemical-Code" class="headerlink" title="I. Chemical Code"></a>I. Chemical Code</h2><p>线段树。考虑当加入一个元素、数字、括号时产生的影响：</p><p>元素：相当于单点加，如果后继是数字则要：</p><ol><li>减去数字的影响（区间除）</li><li>单点修改，加某个值</li><li>加上数字的影响（区间乘）</li></ol><p>数字：相当于区间乘，如果前驱是括号则：</p><ol><li>找到配对的另一个括号</li><li>将括号扩起的区间乘某个值</li></ol><p>括号：如果后继是数字，处理方法和元素相同</p><p>但是，由于模数不是质数，这个区间除就很麻烦了（需要CRT）。但是考虑数字只有$1-9$，因此可以将复杂度$\times10$，懒标记永久化维护$1-9$在线段树上每个节点乘的次数，由于每次都是查询1到n，所以不用pushdown，常数还巨小。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">985151223</span>;</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line">ll p[<span class="number">10</span>][N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mp=&#123;&#123;<span class="string">&#x27;C&#x27;</span>,<span class="number">12</span>&#125;,&#123;<span class="string">&#x27;H&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;O&#x27;</span>,<span class="number">16</span>&#125;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tag</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mul[<span class="number">10</span>];</span><br><span class="line">    Tag()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(mul,<span class="number">0</span>,<span class="keyword">sizeof</span> mul);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">cal</span><span class="params">(ll w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            w=w*p[i][mul[i]]%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> lson o&lt;&lt;1,l,mid</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rson o&lt;&lt;1|1,mid+1,r</span></span><br><span class="line">    ll a[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    Tag b[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">        a[o]=b[o&lt;&lt;<span class="number">1</span>].cal(a[o&lt;&lt;<span class="number">1</span>])+b[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cal(a[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        a[o]%=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            a[o]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">        pushup(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> P,<span class="keyword">int</span> X)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            a[o]+=X;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(P&lt;=mid)add(lson,P,X);</span><br><span class="line">        <span class="keyword">else</span> add(rson,P,X);</span><br><span class="line">        pushup(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">multi</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> X,<span class="keyword">int</span> Y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">            b[o].mul[X]+=Y;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)multi(lson,L,R,X,Y);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)multi(rson,L,R,X,Y);</span><br><span class="line">        pushup(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="keyword">int</span> vis[N],l[N],r[N];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getpre</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> k=se.lower_bound(p);</span><br><span class="line">    <span class="keyword">if</span>(k==se.begin())<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> *--k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnxt</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> k=se.upper_bound(p);</span><br><span class="line">    <span class="keyword">if</span>(k==se.end())<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> *k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op1</span><span class="params">(<span class="keyword">char</span> ch,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w=mp[ch];</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(ch))&#123;</span><br><span class="line">        vis[x]=w;</span><br><span class="line">        <span class="keyword">int</span> pre=getpre(x);</span><br><span class="line">        assert(pre!=<span class="number">-1</span>);</span><br><span class="line">        T.multi(<span class="number">1</span>,<span class="number">1</span>,n,l[pre],pre,w,<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nxt=getnxt(x);</span><br><span class="line">        <span class="keyword">int</span> pre=getpre(x);</span><br><span class="line">        <span class="keyword">if</span>(nxt!=<span class="number">-1</span>&amp;&amp;vis[nxt]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre!=<span class="number">-1</span>)&#123;</span><br><span class="line">                T.multi(<span class="number">1</span>,<span class="number">1</span>,n,l[pre],pre,vis[nxt],<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            T.multi(<span class="number">1</span>,<span class="number">1</span>,n,x,x,vis[nxt],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,n,x,w);</span><br><span class="line">    &#125;</span><br><span class="line">    l[x]=r[x]=x;</span><br><span class="line">    se.insert(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    l[y]=x;</span><br><span class="line">    r[x]=y;</span><br><span class="line">    <span class="keyword">int</span> nxt=getnxt(y);</span><br><span class="line">    <span class="keyword">int</span> pre=getpre(y);</span><br><span class="line">    se.insert(x);</span><br><span class="line">    se.insert(y);</span><br><span class="line">    vis[x]=vis[y]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nxt!=<span class="number">-1</span>&amp;&amp;vis[nxt]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="number">-1</span>)&#123;</span><br><span class="line">            T.multi(<span class="number">1</span>,<span class="number">1</span>,n,l[pre],pre,vis[nxt],<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        T.multi(<span class="number">1</span>,<span class="number">1</span>,n,x,y,vis[nxt],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        mp[i+<span class="string">&#x27;0&#x27;</span>]=i;</span><br><span class="line">        p[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;N;j++)&#123;</span><br><span class="line">            p[i][j]=p[i][j<span class="number">-1</span>]*i%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,l,r;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;ch&gt;&gt;x;</span><br><span class="line">            op1(ch,x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            op2(l,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T.b[<span class="number">1</span>].cal(T.a[<span class="number">1</span>])&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="J-Tuition-Agent"><a href="#J-Tuition-Agent" class="headerlink" title="J. Tuition Agent"></a>J. Tuition Agent</h2><h2 id="K-Piggy-Calculator"><a href="#K-Piggy-Calculator" class="headerlink" title="K. Piggy Calculator"></a>K. Piggy Calculator</h2><p>感觉很厉害，有时间就补。</p><h2 id="L-Construction-of-5G-Base-Station"><a href="#L-Construction-of-5G-Base-Station" class="headerlink" title="L. Construction of 5G Base Station"></a>L. Construction of 5G Base Station</h2><p>概率dp。考虑用$f_{i,j}$表示$i$连到$j$位置的基站的概率，则有</p><p>$f_{i,j}=\frac{p_j}{1-\prod^{n}_{k=1}{(1-p_k)}}\prod_{i到k比j优先}(1-p_k)$</p><p>直观来理解，$p_j$下面那一串是$i$连遍所有基站都失败的概率，后面那一块就是$i$和优先于$j$的所有基站都匹配失败的概率。</p><p>【前置芝士1：一次试验为真的概率为$p$，如果失败会重复直到为真结束，则其期望结束次数为$\frac{1}{p}$】</p><p>（考虑等比数列求和 或 解方程：$E(x)=p\times0+(1-p)\times E(x)+1$即可证明）</p><p>设$E(x_i)$为匹配到基站$i$的人个数的期望，则有</p><p>$E(x_i)=\frac{p_i}{1-\prod^{n}_{k=1}{(1-p_k)}}\sum_{j=1}^{n}\prod_{j到k比i优先}(1-p_k)$</p><p>然后题解说，<strong>容易发现</strong>这东西后一块能用前缀和递推，（赛中感觉不可以递推就没搞，下次遇到这种最好打打草稿看看规律）</p><p><strong>一顿操作</strong>能$O(n)$求出$i\in[1,n]$的$E(x_i)$，</p><p>（PS：这里$Hile$改了2h才过）</p><p>但是题目要求的是$E(\sum_{i=1}^{n}{x_i}^2)$，这时就要利用期望的线性性拆开了。</p><p>【前置芝士2：如果变量$X,Y$相互独立，则$E(X+Y)=E(X)+E(Y), E(XY)=E(X)E(Y)$】</p><p>$E(\sum_{i=1}^{n}x_i^2)=\sum_{i=1}^{n}E(x_i^2)$，</p><p>此时，对于每一个$E(x_i^2)$，$x_i$可以看作$n$个变量$y$之和，其中$y_i=1$表示第$i$个人连接了该基站，所以有</p><p>$E(x)=\sum_{i=1}^{n}E(y_i)$</p><p>原式可写为</p><p>$E((\sum_{i=1}^{n}y_i)^2)=(E(x))^2-\sum_{i=1}^{n}(E(y_i))^2+E(x)$</p><p>其中$\sum_{i=1}^n(E(y_i))^2$可以在求$E(x)$的过程中一起计算。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p[N],q[N],f[N],g[N],s[N],t[N],A[<span class="number">2</span>][N],B[<span class="number">2</span>][N];</span><br><span class="line">ll S=<span class="number">1</span>,ans;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll n=MOD<span class="number">-2</span>,ll m=MOD)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    a%=m;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)res=res*a%m;</span><br><span class="line">        a=a*a%m,n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        p[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        q[i]=(<span class="number">1</span>-p[i]+MOD)%MOD;</span><br><span class="line">        s[i]=i==<span class="number">0</span>?<span class="number">1</span>:<span class="number">1ll</span>*s[i<span class="number">-1</span>]*q[i]%MOD;</span><br><span class="line">        S=S*q[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        t[i]=i==n+<span class="number">1</span>?<span class="number">1</span>:<span class="number">1ll</span>*t[i+<span class="number">1</span>]*q[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        A[<span class="number">0</span>][i]=i==<span class="number">1</span>?<span class="number">0</span>:(i==<span class="number">2</span>?q[<span class="number">1</span>]:(<span class="number">1ll</span>*A[<span class="number">0</span>][i<span class="number">-2</span>]*q[i<span class="number">-1</span>]%MOD*q[i<span class="number">-2</span>]%MOD+s[i<span class="number">-1</span>]+<span class="number">1ll</span>*q[i<span class="number">-1</span>]*q[i<span class="number">-2</span>]%MOD)%MOD);</span><br><span class="line">        A[<span class="number">1</span>][i]=i==<span class="number">1</span>?<span class="number">0</span>:(i==<span class="number">2</span>?<span class="number">1ll</span>*q[<span class="number">1</span>]*q[<span class="number">1</span>]%MOD:(<span class="number">1ll</span>*A[<span class="number">1</span>][i<span class="number">-2</span>]*q[i<span class="number">-1</span>]%MOD*q[i<span class="number">-2</span>]%MOD*q[i<span class="number">-1</span>]%MOD*q[i<span class="number">-2</span>]%MOD+<span class="number">1ll</span>*s[i<span class="number">-1</span>]*s[i<span class="number">-1</span>]+<span class="number">1ll</span>*q[i<span class="number">-1</span>]*q[i<span class="number">-2</span>]%MOD*q[i<span class="number">-1</span>]%MOD*q[i<span class="number">-2</span>]%MOD)%MOD);</span><br><span class="line">        f[i]=(f[i]+A[<span class="number">0</span>][i])%MOD;</span><br><span class="line">        g[i]=(g[i]+A[<span class="number">1</span>][i])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        B[<span class="number">0</span>][i]=i==n?<span class="number">0</span>:(i==n<span class="number">-1</span>?q[n]:(<span class="number">1ll</span>*B[<span class="number">0</span>][i+<span class="number">2</span>]*q[i+<span class="number">1</span>]%MOD*q[i+<span class="number">2</span>]%MOD+t[i+<span class="number">1</span>]+q[i+<span class="number">1</span>])%MOD);</span><br><span class="line">        B[<span class="number">1</span>][i]=i==n?<span class="number">0</span>:(i==n<span class="number">-1</span>?<span class="number">1ll</span>*q[n]*q[n]%MOD:(<span class="number">1ll</span>*B[<span class="number">1</span>][i+<span class="number">2</span>]*q[i+<span class="number">1</span>]%MOD*q[i+<span class="number">2</span>]%MOD*q[i+<span class="number">1</span>]%MOD*q[i+<span class="number">2</span>]%MOD+<span class="number">1ll</span>*t[i+<span class="number">1</span>]*t[i+<span class="number">1</span>]%MOD+<span class="number">1ll</span>*q[i+<span class="number">1</span>]*q[i+<span class="number">1</span>]%MOD)%MOD);</span><br><span class="line">        f[i]=(f[i]+B[<span class="number">0</span>][i])%MOD;</span><br><span class="line">        g[i]=(g[i]+B[<span class="number">1</span>][i])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i]++,g[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    S=qpow(<span class="number">1</span>-S+MOD);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i]=<span class="number">1ll</span>*f[i]*p[i]%MOD*S%MOD;</span><br><span class="line">        g[i]=<span class="number">1ll</span>*g[i]*p[i]%MOD*p[i]%MOD*S%MOD*S%MOD;</span><br><span class="line">        f[i]=(<span class="number">1ll</span>*f[i]*f[i]%MOD-g[i]+MOD+f[i])%MOD;</span><br><span class="line">        ans=(ans+f[i])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="M-Matrix-Problem"><a href="#M-Matrix-Problem" class="headerlink" title="M. Matrix Problem"></a>M. Matrix Problem</h2><p>签到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这场7题没啥难度，但之后是真的难开，补一道卡一道，本来是要补10题的，考虑难度和效果就改9题了。&lt;/p&gt;
&lt;h2 id=&quot;A-Beta-Go&quot;&gt;&lt;a href=&quot;#A-Beta-Go&quot; class=&quot;headerlink&quot; title=&quot;A. Beta Go&quot;&gt;&lt;/a&gt;A.</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2021CCPC东北四省赛</title>
    <link href="http://example.com/2021/10/19/2021CCPC%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B/"/>
    <id>http://example.com/2021/10/19/2021CCPC%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B/</id>
    <published>2021-10-19T00:14:22.000Z</published>
    <updated>2021-11-03T07:41:07.412Z</updated>
    
    <content type="html"><![CDATA[<p>都1202年了竟然有比赛会出模板题（主要是没带模板，战犯++</p><h2 id="A-Matrix"><a href="#A-Matrix" class="headerlink" title="A. Matrix"></a>A. Matrix</h2><p>一开始的思路是计算前$n$个数分布在恰好$k$行的方案数，然后考虑了容斥、斯特林数等一堆东西，发现又重又漏。</p><p>写完H，在Awei写C的时候突然反应过来，对于每个数在一行作为最小值的情况计算贡献完全没问题且公式简洁，遂ac。</p><p><strong>当一道被a穿的题想不出来时，及时转换思路防止钻牛角尖。</strong></p><p>（笑死，思路想歪，2h签不出到）</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Solution</span></div>    <div class="xContent"><div class="inner">        <p>$n\times(n^2-n)!\times\sum_{i=1}^{i=n}{n^2-i\choose n-1}$</p>     </div></div>    </div><h2 id="B-Cypher"><a href="#B-Cypher" class="headerlink" title="B. Cypher"></a>B. Cypher</h2><p>五页的题面三个字：大模拟。但其实听队友一说好像难度$90\%$都在读题上，属于是出题人不怀好意了（</p><p>题意建议自己读，体验一下（）</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,p,q,d[N],b[N];</span><br><span class="line"><span class="built_in">string</span> s[N],t[N],r,all=<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; mp,mr;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    s[i]=s[i].substr(k,<span class="number">26</span>)+s[i].substr(<span class="number">0</span>,k);</span><br><span class="line">    t[i]=t[i].substr(k,<span class="number">26</span>)+t[i].substr(<span class="number">0</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        b[i]++;</span><br><span class="line">        rotate(i,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(b[i]%<span class="number">26</span>==<span class="number">0</span>&amp;&amp;i&lt;=n)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id=mp[c]-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        id=t[i][id];</span><br><span class="line">        id=s[i].find(id);</span><br><span class="line">    &#125;</span><br><span class="line">    id=all[id];</span><br><span class="line">    id=r.find(id);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        id=s[i][id];</span><br><span class="line">        id=t[i].find(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mp[id+<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            mp[i+<span class="string">&#x27;A&#x27;</span>]=i+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">            mp[tmp[<span class="number">0</span>]]=tmp[<span class="number">1</span>];</span><br><span class="line">            mp[tmp[<span class="number">1</span>]]=tmp[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">            t[i]=all;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;d[i];</span><br><span class="line">            b[i]=d[i];</span><br><span class="line">            rotate(i,d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            mr[<span class="string">&#x27;A&#x27;</span>+i]=r[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:tmp)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;query(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="C-Vertex-Deletion"><a href="#C-Vertex-Deletion" class="headerlink" title="C. Vertex Deletion"></a>C. Vertex Deletion</h2><h2 id="D-Lowbit"><a href="#D-Lowbit" class="headerlink" title="D. Lowbit"></a>D. Lowbit</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Solution</span></div>    <div class="xContent"><div class="inner">        <p>属于是势能线段树裸题了，势能函数$f(x)$为将$x$变为$2^k$的操作次数，显然$\max\{f(x)\}=log_2(x)$，所以可以维护一个标记来表示区间内的数都为$2$的幂次，当一个区间被标记时，$1$操作就变成了区间乘二。复杂度$O(n\log^2 n)$。</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b[N];</span><br><span class="line"><span class="function">ll <span class="title">lowbit</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> lson o&lt;&lt;1,l,mid</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rson o&lt;&lt;1|1,mid+1,r</span></span><br><span class="line">    ll val[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> tag[N&lt;&lt;<span class="number">2</span>],all[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        tag[o]=<span class="number">1</span>,all[o]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            val[o]=a[l],all[o]=!b[l].size();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">        all[o]=all[o&lt;&lt;<span class="number">1</span>]+all[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        val[o]=(val[o&lt;&lt;<span class="number">1</span>]+val[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        tag[o]=<span class="number">1LL</span>*tag[o]*k%MOD;</span><br><span class="line">        val[o]=<span class="number">1LL</span>*val[o]*k%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">        pd(o&lt;&lt;<span class="number">1</span>,tag[o]);</span><br><span class="line">        pd(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,tag[o]);</span><br><span class="line">        tag[o]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">            <span class="keyword">if</span>(all[o]==r-l+<span class="number">1</span>)&#123;</span><br><span class="line">                pd(o,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l==r&amp;&amp;!all[o])&#123;</span><br><span class="line">                val[o]=(val[o]+b[l].back())%MOD;</span><br><span class="line">                b[l].pop_back();</span><br><span class="line">                <span class="keyword">if</span>(!b[l].size())all[o]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(o);</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)update(lson,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)update(rson,L,R);</span><br><span class="line">        all[o]=all[o&lt;&lt;<span class="number">1</span>]+all[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        val[o]=(val[o&lt;&lt;<span class="number">1</span>]+val[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,ll res=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">            <span class="keyword">return</span> val[o];</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(o);</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)(res+=query(lson,L,R))%=MOD;</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)(res+=query(rson,L,R))%=MOD;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            b[i].clear();</span><br><span class="line">            ll tmp=a[i];</span><br><span class="line">            <span class="keyword">while</span>(__builtin_popcount(tmp)!=<span class="number">1</span>)&#123;</span><br><span class="line">                b[i].push_back((lowbit(tmp))%MOD);</span><br><span class="line">                tmp+=lowbit(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            reverse(b[i].begin(),b[i].end());</span><br><span class="line">        &#125;</span><br><span class="line">        S.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> op,l,r;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;op&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">                S.update(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;S.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="E-Easy-Math-Problem"><a href="#E-Easy-Math-Problem" class="headerlink" title="E. Easy Math Problem"></a>E. Easy Math Problem</h2><p>签到。Hile_Meow病发，wa一发才过。</p><h2 id="F-Permutation"><a href="#F-Permutation" class="headerlink" title="F. Permutation"></a>F. Permutation</h2><h2 id="G-Ball"><a href="#G-Ball" class="headerlink" title="G. Ball"></a>G. Ball</h2><p>计数。考虑满足$n,m,k$的状态最终一定是两段，前一段连续，后一段和前一段不连续（长度可能为0）。</p><p>假设第一段长度为$x$，令$f_{i,j}$表示扔$i$个球填满$j$个区域的方案数，$g_{i,j}$表示扔$i$个球填不满$j$个区域的方案数，则此时答案为$f_{k+x,x}\times g_{m-k-x,n-x-1}\times {m\choose k+x}$，</p><p>考虑枚举所有可能的$x$，则答案为上式之和，接下来计算$f$和$g$。</p><p>可以看看<a href="https://waberzhuang.github.io/2021/10/17/%E7%BB%84%E9%98%9F%E8%B5%9B%E8%AE%AD%E7%BB%83/2021-%E4%B8%9C%E5%8C%97%E7%9C%81%E8%B5%9B/">ZAwei的博客</a>，里面的转移很简单，这里提供一种相对麻烦但是没有思维难度的计算方法：</p><p>考虑$f_{i,j}$的转移有两种：</p><ul><li>在已经填满$j$个区域的基础上再扔一个球</li><li>扔第$i$个球时<strong>恰好</strong>填满$j$个区域</li></ul><p>第一种转移就是$f_{i-1,j}\times j$，</p><p>第二种转移考虑枚举最后一个填的位置$x$，结果为$f_{i-j+x-1,j}\times f_{j-x,j-x}\times{i-1\choose j-x}\times(j-x+1)$，</p><p>复杂度$O(mn^2)$。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> f[N&lt;&lt;<span class="number">1</span>][N],g[N&lt;&lt;<span class="number">1</span>][N],C[N&lt;&lt;<span class="number">2</span>][N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!k)<span class="keyword">return</span> g[m][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=min(n,m-k);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n)&#123;</span><br><span class="line">            ans=(ans+<span class="number">1LL</span>*f[i+k][i]*g[m-i-k][n-i<span class="number">-1</span>]%MOD*C[m][i+k]%MOD)%MOD;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n+k==m)&#123;</span><br><span class="line">            ans=(ans+f[m][n])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2000</span>;i++)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=min(i,<span class="number">500</span>);j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=j;k++)&#123;</span><br><span class="line">                f[i][j]=(f[i][j]+<span class="number">1LL</span>*f[i-j+k<span class="number">-1</span>][k<span class="number">-1</span>]*f[j-k][j-k]%MOD*C[i<span class="number">-1</span>][j-k]%MOD*(j-k+<span class="number">1</span>)%MOD)%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i][j]=(f[i][j]+<span class="number">1LL</span>*f[i<span class="number">-1</span>][j]*j%MOD)%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">500</span>;j++)&#123;</span><br><span class="line">        g[<span class="number">0</span>][j]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=j;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=i;k++)&#123;</span><br><span class="line">                g[i][j]=(g[i][j]+<span class="number">1LL</span>*g[i-k][j<span class="number">-1</span>]*C[i][k]%MOD)%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,k;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;solve(n,m,k)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="H-Loneliness"><a href="#H-Loneliness" class="headerlink" title="H. Loneliness"></a>H. Loneliness</h2><p>给出一个$n\times n$的矩阵，你的分数初始为$1$。当分数为$x$时，往上下左右分别会变成$x/2,x\times2,x+2,x-2$（往上时$x$必须为偶数），给出一个$k$，要求输出从$(1,1)$到$(n,n)$的一条路径（可重复经过$(n,n)$在内的点）使得在终点时分数恰好为$k$。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Solution</span></div>    <div class="xContent"><div class="inner">        <p>构造。考虑$n=100$，有足够的空间去构造答案，所以不妨倒过来想$k$是怎么构造出来的（考虑二进制），可以发现能根据$k$找到一个点$P(x,y)$满足在$P$点的答案为$0$，只往右或往下就能在$(n,n)$恰好得到$k$。由于$k\le 10^{16}&lt;2^{60}$，$P$肯定在矩阵中。</p><p>然后考虑上下左右移动就是对于$2$的加减乘除：假设初始为偶数$x$，则$x$依次右上左下移动会得到$x+2,x/2+1,x/2-1,x-2$，也就是说$x$可以这么转一圈然后原地减$2$。</p><p>问题解决了，首先二进制分解$k$求出$P$点。第一步往下移动到$(2,1)$，当前答案为$2$，通过转圈操作使答案保持为$0$，逐步右移到和$P$同纵坐标，然后就一路往下到$P$，再构造$k$就好了。题目要求操作数小于$1000$，每次转圈消耗$4$步，从$(1,1)$到$(100,100)$需要$198$步，构造的答案显然小于$1000$。</p><p>（这种构造题建议给出充足的时间让不上机的队友玩，玩着玩着就出了）</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <p>赛中代码有点丑，不放了。</p>     </div></div>    </div><h2 id="I-Takeaway"><a href="#I-Takeaway" class="headerlink" title="I. Takeaway"></a>I. Takeaway</h2><p>签到。Boboge秒了。</p><h2 id="J-Transform"><a href="#J-Transform" class="headerlink" title="J. Transform"></a>J. Transform</h2><p>求三维点绕三维向量旋转某角度之后的结果。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Solution</span></div>    <div class="xContent"><div class="inner">        <p><strong>Rodriguez Formula</strong>板子题。</p><p>向量$v$绕<strong>单位向量</strong>$u$旋转$\theta$后的$v’$为</p><p>$v’=v\cos\theta+u(u·v)(1-\cos\theta)+(u\times v)\sin\theta$</p><p>（其中 $·$ 为三维点乘，$\times$为三维叉乘）</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Solution</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y,z;</span><br><span class="line">    Point(<span class="keyword">double</span> x=<span class="number">0</span>,<span class="keyword">double</span> y=<span class="number">0</span>,<span class="keyword">double</span> z=<span class="number">0</span>):x(x),y(y),z(z)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y+z*z);&#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span>&#123;<span class="keyword">return</span> x*b.x+y*b.y+z*b.z;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point &amp;t) &#123;<span class="keyword">return</span> Point(x+t.x,y+t.y,z+t.z);&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> ^ (<span class="keyword">const</span> Point &amp;t) &#123;<span class="keyword">return</span> Point(y*t.z-t.y*z,t.x*z-x*t.z,x*t.y-t.x*y);&#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">double</span> t) &#123;<span class="keyword">return</span> Point(x*t,y*t,z*t);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Vector;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Point a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(a*a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector u,Vector v,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> len=Length(u);</span><br><span class="line">    u=u*(<span class="number">1.0</span>/len);</span><br><span class="line">    <span class="keyword">return</span> v*<span class="built_in">cos</span>(r)+u*(u*v)*(<span class="number">1.0</span>-<span class="built_in">cos</span>(r))+(u^v)*<span class="built_in">sin</span>(r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        Point a,b;</span><br><span class="line">        <span class="keyword">double</span> r;</span><br><span class="line">        a.read(),b.read();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;r);</span><br><span class="line">        r=r*PI/<span class="number">180.0</span>;</span><br><span class="line">        Vector P=Rotate(a,b,r);</span><br><span class="line">        Vector Q=Rotate(a,b,-r);</span><br><span class="line">        <span class="keyword">if</span>(P.z&gt;Q.z)swap(P,Q);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.9f %.9f %.9f\n&quot;</span>,Q.x,Q.y,Q.z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="K-City"><a href="#K-City" class="headerlink" title="K. City"></a>K. City</h2><p>签到。Boboge秒了。</p><h2 id="L-k-th-Smallest-Common-Substring"><a href="#L-k-th-Smallest-Common-Substring" class="headerlink" title="L. k-th Smallest Common Substring"></a>L. k-th Smallest Common Substring</h2><h2 id="M-Master-of-Shuangpin"><a href="#M-Master-of-Shuangpin" class="headerlink" title="M. Master of Shuangpin"></a>M. Master of Shuangpin</h2><p>签到。Boboge秒了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;都1202年了竟然有比赛会出模板题（主要是没带模板，战犯++&lt;/p&gt;
&lt;h2 id=&quot;A-Matrix&quot;&gt;&lt;a href=&quot;#A-Matrix&quot; class=&quot;headerlink&quot; title=&quot;A. Matrix&quot;&gt;&lt;/a&gt;A. Matrix&lt;/h2&gt;&lt;p&gt;一开始的思路</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2020CCPC东北四省赛</title>
    <link href="http://example.com/2021/10/15/2020CCPC%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B/"/>
    <id>http://example.com/2021/10/15/2020CCPC%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B/</id>
    <published>2021-10-15T15:52:07.000Z</published>
    <updated>2021-10-19T00:13:29.026Z</updated>
    
    <content type="html"><![CDATA[<p>10.15打的组队赛，感觉自从使用了战术之后发挥稳定了不少，出了9/12题。</p><p>战术：Hile_Meow非必要不上机，Hile_Meow所读题意必让队友确认（经典wa签到+读歪题）</p><h2 id="A-Micro-Structure-Thread"><a href="#A-Micro-Structure-Thread" class="headerlink" title="A. Micro Structure Thread"></a>A. Micro Structure Thread</h2><p>构造+MST。待补</p><h2 id="B-Team"><a href="#B-Team" class="headerlink" title="B. Team"></a>B. Team</h2><p>网络流。考虑通过源汇点的流量控制$m$个组合，然后$B$向$A$建边，$A$向$C$建边，流量为1，费用为预处理的$f(u,v)$，$A$拆点控制流量为1。</p><p>虽然是求最大权值，但是因为所有路径长度相同，我们可以令每条边的权值为$M-f(u,v)$，然后跑dijkstra费用流，或者直接边权取反上spfa费用流（可处理负权边）。</p><h2 id="C-Function"><a href="#C-Function" class="headerlink" title="C. Function"></a>C. Function</h2><p>数学。显然$f(x)\le x$，而且根据这个后缀积的不可构造性，猜测大概率会收敛到一个$f(x)=x$的值（如$k000001$或一个个位数），看榜上过的挺快就直接冲了一发记忆化+暴力，跑得飞快。</p><h2 id="D-Fall-Guys"><a href="#D-Fall-Guys" class="headerlink" title="D. Fall Guys"></a>D. Fall Guys</h2><p>签到。Boboge秒了。</p><h2 id="E-Liner-vectors"><a href="#E-Liner-vectors" class="headerlink" title="E. Liner vectors"></a>E. Liner vectors</h2><p>构造。首先显然$n=k$且$n\ne 1$时无解，然后考虑当$k\%2=0$时，每一维度形成的列向量异或为0，说明任意列向量都等于其他$n-1$个列向量的异或和，矩阵不满秩。</p><p>接下来就好构造了，前$k+1$个向量的前$k+1$位形成一个对角线为0的矩阵，后面的行直接对前面$n-k-1$位每行分配一个$1$，每行剩下的$1$全放在最低的$k-1$位。</p><p><del>赛中写的唯一一道题，还被n=1,k=1卡了一发</del></p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>||n==k)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt; ve;</span><br><span class="line">        ll tmp=<span class="number">1LL</span>&lt;&lt;(k+<span class="number">1</span>);</span><br><span class="line">        tmp--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            ve.push_back(tmp^(<span class="number">1LL</span>&lt;&lt;i));</span><br><span class="line">        &#125;</span><br><span class="line">        tmp&gt;&gt;=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k+<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ve.push_back(tmp^(<span class="number">1LL</span>&lt;&lt;i));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ve.begin(),ve.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld%c&quot;</span>,ve[i<span class="number">-1</span>],i==n?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="F-Splendor"><a href="#F-Splendor" class="headerlink" title="F. Splendor"></a>F. Splendor</h2><p>贪心+大模拟的防ak。貌似不太可做</p><h2 id="G-Halli-Galli"><a href="#G-Halli-Galli" class="headerlink" title="G. Halli Galli"></a>G. Halli Galli</h2><p>签到。Boboge秒了。</p><h2 id="H-PepperLa’s-String"><a href="#H-PepperLa’s-String" class="headerlink" title="H. PepperLa’s String"></a>H. PepperLa’s String</h2><p>贪心。既然要优先最短，其次字典序最小。</p><p>分两类位置：</p><ol><li>使字符串长度变短：删单个字符，删两个字符之一，删$16^k$个连续字符一端</li><li>使字符串长度不变：删连续相同字符一端</li></ol><p>有第一类优先删第一类，如果能让字典序变小则删第一个能让字典序变小的，否则删最后一个第一类位置。</p><p>如果没有第一类位置，则删第一个字符。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> len[N];</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">tohex</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss&lt;&lt;hex&lt;&lt;x;</span><br><span class="line">    <span class="built_in">string</span> t;</span><br><span class="line">    ss&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">islower</span>(i))&#123;</span><br><span class="line">            i+=<span class="string">&#x27;A&#x27;</span>-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    s.push_back(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i<span class="number">-1</span>]!=s[i])&#123;</span><br><span class="line">            p.push_back(&#123;s[i<span class="number">-1</span>],cnt&#125;);</span><br><span class="line">            cnt=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>,les=N,mor=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i].second==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>==p.size()||p[i].first&gt;p[i+<span class="number">1</span>].first)&#123;</span><br><span class="line">                les=min(les,i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mor=i;</span><br><span class="line">            &#125;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p[i].second==<span class="number">2</span>)&#123;</span><br><span class="line">            mor=i;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len[p[i].second<span class="number">-1</span>]!=len[p[i].second])&#123;</span><br><span class="line">            mor=i;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">if</span>(les&lt;N)&#123;</span><br><span class="line">            p[les].second--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p[mor].second--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p[<span class="number">0</span>].second--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:p)&#123;</span><br><span class="line">        <span class="keyword">char</span> ch=i.first;</span><br><span class="line">        <span class="keyword">int</span>  cnt=i.second;</span><br><span class="line">        <span class="keyword">if</span>(!cnt)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ch;</span><br><span class="line">        <span class="built_in">string</span> tmp=tohex(cnt);</span><br><span class="line">        <span class="keyword">if</span>(tmp!=<span class="string">&quot;1&quot;</span>)<span class="built_in">cout</span>&lt;&lt;tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    len[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        len[i]=len[i/<span class="number">16</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="I-PepperLa’s-Cram-School"><a href="#I-PepperLa’s-Cram-School" class="headerlink" title="I. PepperLa’s Cram School"></a>I. PepperLa’s Cram School</h2><p>图论，小坑。由于边长相同，答案即为$d[i][j]$中最小值出现次数$/2$（一条边贡献两次），注意最小边权不一定是$1$。</p><h2 id="J-Color-the-blocks"><a href="#J-Color-the-blocks" class="headerlink" title="J. Color the blocks"></a>J. Color the blocks</h2><p>签到。从$(x,y)$到$(x+1,y+2),(x-1,y+2),(x+3,y),(x-3,y)$建边，答案即为$2^{连通块数}$，显然$n\ge4$时答案为$4$，其他手算一下就好了。</p><h2 id="K-PepperLa’s-Boast"><a href="#K-PepperLa’s-Boast" class="headerlink" title="K. PepperLa’s Boast"></a>K. PepperLa’s Boast</h2><p>dp。考虑$f[i][j]$表示在$(i,j)$处的答案，则每次转移只会从左、上、左上移动过来或者从以$(i,j)$为右下角的一个$k\times k$的矩形转移而来，也就是说要$O(1)$求出左上矩形内的最大值，这就是二维单调队列裸题了。</p><p>二维单调队列：对每行和每列都开一个单调队列，先把答案更新到该列中，再用该列的答案更新该行。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,u,a[N][N];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">ll f[N][N];</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="built_in">pair</span>&lt;ll,ll&gt;&gt; col[N],row[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;y&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initQ</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(row[i].size())&#123;</span><br><span class="line">            row[i].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(col[i].size())&#123;</span><br><span class="line">            col[i].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="built_in">deque</span>&lt;<span class="built_in">pair</span>&lt;ll,ll&gt;&gt; &amp;q,<span class="built_in">pair</span>&lt;ll,ll&gt; x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.size()&amp;&amp;q.back().first&lt;=x.first)&#123;</span><br><span class="line">        q.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    q.push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">top</span><span class="params">(<span class="built_in">deque</span>&lt;<span class="built_in">pair</span>&lt;ll,ll&gt;&gt; &amp;q,ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.size()&amp;&amp;q.front().second&lt;=x)q.pop_front();</span><br><span class="line">    <span class="keyword">if</span>(q.size())<span class="keyword">return</span> q.front().first;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;u)&#123;k++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">                f[i][j]=-INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        initQ(n,m);</span><br><span class="line">        f[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        push(col[<span class="number">1</span>],&#123;f[<span class="number">1</span>][<span class="number">1</span>],<span class="number">1</span>&#125;);</span><br><span class="line">        push(row[<span class="number">1</span>],&#123;f[<span class="number">1</span>][<span class="number">1</span>],<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>+(i==<span class="number">1</span>);j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j]&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    f[i][j]=<span class="number">-1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;<span class="number">3</span>;t++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(ok(i-dx[t],j-dy[t])&amp;&amp;f[i-dx[t]][j-dy[t]]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                            f[i][j]=max(f[i][j],f[i-dx[t]][j-dy[t]]+a[i][j]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ll t=max(top(row[i],j-k),top(col[j],i-k));</span><br><span class="line">                    <span class="keyword">if</span>(t&gt;=<span class="number">0</span>)f[i][j]=max(f[i][j],t+a[i][j]-u);</span><br><span class="line">                &#125;</span><br><span class="line">                push(col[j],&#123;f[i][j],i&#125;);</span><br><span class="line">                push(row[i],&#123;top(col[j],i-k),j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;max(<span class="number">-1LL</span>,f[n][m])&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="L-PepperLa’s-Express"><a href="#L-PepperLa’s-Express" class="headerlink" title="L. PepperLa’s Express"></a>L. PepperLa’s Express</h2><p>搜索。首先遇到$\min$和$\max$来回套的题，第一反应必是二分答案。考虑二分了一个答案$mid$，可以先做一个bfs把所有已经和’@’距离在$mid$内的’*‘搞掉，然后考虑求出距离每个位置最远的’*‘，如果存在某个空格最远距离小于$mid$，说明可以把新的’@’放在这里使答案不大于$mid$。</p><p>赛中其实讨论了一个憨批做法，对于每一维来回扫一遍，从一维更新到三维，复杂度$O(8XYZ)$，但是写起来有点恶心，而且好像会爆空间，赛中没写完。</p><p>看出题人的方法有点牛，既然是找距离最远的点，那必然是$|x_i-x_j|+|y_i-y_j|+|z_i-z_j|$最大，我们可以把里面的正负号拆开，$i,j$各存$2^3$种，我们可以直接在为长为3的二进制互为补集的两种组合中求答案。</p><p>感觉这个拆绝对值符号的思路挺好，而且代码写起来也很简洁。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> h,n,m;</span><br><span class="line"><span class="keyword">char</span> s[N][N][N];</span><br><span class="line"><span class="keyword">int</span> d[N][N][N];</span><br><span class="line"><span class="keyword">int</span> f[N][N][N];</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dz[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> sgn[<span class="number">2</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;y&lt;=m&amp;&amp;z&gt;=<span class="number">1</span>&amp;&amp;z&lt;=h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=h;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!d[k][i][j])&#123;</span><br><span class="line">                    q.push(&#123;i,j,k&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        node p=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;<span class="number">6</span>;t++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=p.x+dx[t];</span><br><span class="line">            <span class="keyword">int</span> y=p.y+dy[t];</span><br><span class="line">            <span class="keyword">int</span> z=p.z+dz[t];</span><br><span class="line">            <span class="keyword">if</span>(ok(x,y,z)&amp;&amp;d[z][x][y]==<span class="number">-1</span>)&#123;</span><br><span class="line">                d[z][x][y]=d[p.z][p.x][p.y]+<span class="number">1</span>;</span><br><span class="line">                q.push(&#123;x,y,z&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=h+<span class="number">1</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                f[k][i][j]=-INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">-0x3f</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=h;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[k][i][j]==<span class="string">&#x27;*&#x27;</span>&amp;&amp;d[k][i][j]&gt;mid)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)&#123;</span><br><span class="line">                        g[t]=max(g[t],k*sgn[(t)&amp;<span class="number">1</span>]+i*sgn[(t&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>]+j*sgn[(t&gt;&gt;<span class="number">2</span>)&amp;<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=h;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[k][i][j]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)&#123;</span><br><span class="line">                        res=max(res,g[t^<span class="number">7</span>]+k*sgn[(t)&amp;<span class="number">1</span>]+i*sgn[(t&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>]+j*sgn[(t&gt;&gt;<span class="number">2</span>)&amp;<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(res&lt;=mid)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;h&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=h;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;s[k][i][j];</span><br><span class="line">                    d[k][i][j]=<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(s[k][i][j]==<span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">                        d[k][i][j]=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=h+n+m,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))&#123;</span><br><span class="line">                ans=mid;</span><br><span class="line">                r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;10.15打的组队赛，感觉自从使用了战术之后发挥稳定了不少，出了9/12题。&lt;/p&gt;
&lt;p&gt;战术：Hile_Meow非必要不上机，Hile_Meow所读题意必让队友确认（经典wa签到+读歪题）&lt;/p&gt;
&lt;h2 id=&quot;A-Micro-Structure-Thread&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="组队训练" scheme="http://example.com/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2017CCPC女生赛</title>
    <link href="http://example.com/2021/10/15/2017CCPC%E5%A5%B3%E7%94%9F%E8%B5%9B/"/>
    <id>http://example.com/2021/10/15/2017CCPC%E5%A5%B3%E7%94%9F%E8%B5%9B/</id>
    <published>2021-10-15T14:24:16.000Z</published>
    <updated>2021-10-15T18:05:10.410Z</updated>
    
    <content type="html"><![CDATA[<p>最近组队赛有点拉跨，于是个人vp加训，写写题解。</p><h2 id="A-Automatic-Judge"><a href="#A-Automatic-Judge" class="headerlink" title="A - Automatic Judge"></a>A - Automatic Judge</h2><p>签到，模拟。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; ve[<span class="number">22</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,a,b,c;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> d[<span class="number">22</span>];</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d:%d %s&quot;</span>,&amp;a,&amp;b,&amp;c,d);</span><br><span class="line">            <span class="keyword">int</span> t=b*<span class="number">60</span>+c;</span><br><span class="line">            <span class="keyword">if</span>(d[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>&amp;&amp;d[<span class="number">1</span>]==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">                ve[a<span class="number">-1000</span>].push_back(&#123;t,<span class="number">1</span>&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ve[a<span class="number">-1000</span>].push_back(&#123;t,<span class="number">0</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">            sort(ve[i].begin(),ve[i].end());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j:ve[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j.second)&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    ans+=s+j.first;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    s+=<span class="number">20</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,cnt,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="B-Building-Shops"><a href="#B-Building-Shops" class="headerlink" title="B - Building Shops"></a>B - Building Shops</h2><p>dp。先对每个pair按照位置排序，$f[i][j]$为考虑前$i$个点，上一次选在$j$时的答案，则有</p><p>$f[i][j]=min(f[i][j],f[i-1][j]+x[i]-x[j])(i!=j)$</p><p>$f[i][j]=min(f[i][j],f[i-1][j]+c[i])(i==j)$</p><p>最终答案为$max(\{f[n][1…n]\})$。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,x[N],c[N];</span><br><span class="line">ll f[N][N];</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p[N];</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>]=p[<span class="number">1</span>].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            f[i][j]=min(f[i][j],f[i<span class="number">-1</span>][j]+p[i].first-p[j].first);</span><br><span class="line">            f[i][i]=min(f[i][i],f[i<span class="number">-1</span>][j]+p[i].second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *min_element(f[n]+<span class="number">1</span>,f[n]+<span class="number">1</span>+n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,x+i,c+i);</span><br><span class="line">            p[i]=&#123;x[i],c[i]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,solve());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="C-Coprime-Sequence"><a href="#C-Coprime-Sequence" class="headerlink" title="C - Coprime Sequence"></a>C - Coprime Sequence</h2><p>签到，处理出前后缀$\gcd$然后枚举删的位置。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N];</span><br><span class="line"><span class="keyword">int</span> l[N],r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            l[i]=__gcd(l[i<span class="number">-1</span>],a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        r[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            r[i]=__gcd(r[i+<span class="number">1</span>],a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=max(r[<span class="number">2</span>],l[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ans=max(ans,__gcd(l[i<span class="number">-1</span>],r[i+<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="D-Deleting-Edges"><a href="#D-Deleting-Edges" class="headerlink" title="D - Deleting Edges"></a>D - Deleting Edges</h2><p>图论。考虑最终形成的是一棵以0为根的生成树，可以枚举最后形成的树中每个点连向父亲的那条边，对每个结点来说，删边方案是相互独立的（因为树上每个点的父亲唯一），乘起来就是最终答案。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N][N],b[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">                b[i][j]=a[i][j];</span><br><span class="line">                <span class="keyword">if</span>(!b[i][j])b[i][j]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">                <span class="keyword">if</span>(i==j)b[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(b[i][k]&amp;&amp;b[k][j])&#123;</span><br><span class="line">                    b[i][j]=min(b[i][j],b[i][k]+b[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ll res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j][i]&amp;&amp;b[<span class="number">0</span>][j]+a[j][i]==b[<span class="number">0</span>][i])&#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=ans*res%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="E-Easy-Summation"><a href="#E-Easy-Summation" class="headerlink" title="E - Easy Summation"></a>E - Easy Summation</h2><p>签到，怎么做都行。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll ans[<span class="number">6</span>][N];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll n=MOD<span class="number">-2</span>,ll m=MOD)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    a%=m;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)res=res*a%m;</span><br><span class="line">        a=a*a%m,n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;N;j++)&#123;</span><br><span class="line">            ans[i][j]=(ans[i][j<span class="number">-1</span>]+qpow(j,i))%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[m][n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="F-Forgiveness"><a href="#F-Forgiveness" class="headerlink" title="F - Forgiveness"></a>F - Forgiveness</h2><p>赛中没过，待补。感觉是个$O(10\times n\times\sqrt{n}\times\log{n})$的分块（应该没有$\log{n}$？）。</p><p>（后记：Claris出的防AK，据说要bitset搞搞）</p><h2 id="G-Graph-Theory"><a href="#G-Graph-Theory" class="headerlink" title="G - Graph Theory"></a>G - Graph Theory</h2><p>图论。考虑每个1和前面的2匹配，剩下的1两两匹配，剩下2或者n为奇数就是No。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">            <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>)cnt--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>((cnt==<span class="number">0</span>&amp;&amp;n%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="H-Happy-Necklace"><a href="#H-Happy-Necklace" class="headerlink" title="H - Happy Necklace"></a>H - Happy Necklace</h2><p>打表，数学。题意等价求长为n且两个0的距离大于2的01串的方案数，赛中人工打了个表(2,3,4,6,9,13)，发现是$f[n]=f[n-1]+f[n-3]$，矩阵快速幂即可。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mat</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[K][K];</span><br><span class="line">    mat()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">operator</span> [] (<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> a[i];&#125;</span><br><span class="line">    mat <span class="keyword">operator</span> * (mat b)&#123;</span><br><span class="line">        mat res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line">                    (res[i][j]+=<span class="number">1LL</span>*a[i][k]*b[k][j]%MOD)%=MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">mat <span class="title">qpow</span><span class="params">(mat a,ll n)</span></span>&#123;</span><br><span class="line">    mat res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        res.a[i][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)res=res*a;</span><br><span class="line">        a=a*a,n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        mat A,B;</span><br><span class="line">        A[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        A[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">        A[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">        B[<span class="number">2</span>][<span class="number">1</span>]=B[<span class="number">0</span>][<span class="number">2</span>]=B[<span class="number">1</span>][<span class="number">0</span>]=B[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">        A=A*qpow(B,n<span class="number">-2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,A[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="I-Innumerable-Ancestors"><a href="#I-Innumerable-Ancestors" class="headerlink" title="I - Innumerable Ancestors"></a>I - Innumerable Ancestors</h2><p>树论。结论：$k$个点中LCA深度最大的两点dfs序一定相邻（考虑反证法），所以对集合A,B按照dfs序排序并双指针处理。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k1,k2,dfn[N],tot,a[N],b[N];</span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N][<span class="number">20</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>]=pre;</span><br><span class="line">    dfn[u]=++tot;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])</span><br><span class="line">        <span class="keyword">if</span>(v!=pre)</span><br><span class="line">            dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            fa[j][i]=fa[fa[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])swap(u,v);</span><br><span class="line">    <span class="keyword">int</span> d=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=d;i++)</span><br><span class="line">        <span class="keyword">if</span>(d&amp;(<span class="number">1</span>&lt;&lt;i))u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfn[a]&lt;dfn[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            G[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span> fa);</span><br><span class="line">        <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">            G[u].push_back(v);</span><br><span class="line">            G[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k1);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k1;i++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k2;i++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,b+i);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(a+<span class="number">1</span>,a+<span class="number">1</span>+k1,cmp);</span><br><span class="line">            sort(b+<span class="number">1</span>,b+<span class="number">1</span>+k2,cmp);</span><br><span class="line">            <span class="keyword">int</span> p=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">1</span>;q&lt;=k2;q++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(p+<span class="number">1</span>&lt;=k1&amp;&amp;dfn[a[p+<span class="number">1</span>]]&lt;=dfn[b[q]])&#123;</span><br><span class="line">                    p++;</span><br><span class="line">                &#125;</span><br><span class="line">                ans=max(ans,dep[lca(a[p],b[q])]);</span><br><span class="line">            &#125;</span><br><span class="line">            p=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">1</span>;q&lt;=k2;q++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(p+<span class="number">1</span>&lt;=k1&amp;&amp;dfn[a[p]]&lt;=dfn[b[q]])&#123;</span><br><span class="line">                    p++;</span><br><span class="line">                &#125;</span><br><span class="line">                ans=max(ans,dep[lca(a[p],b[q])]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="J-Judicious-Strategy"><a href="#J-Judicious-Strategy" class="headerlink" title="J - Judicious Strategy"></a>J - Judicious Strategy</h2><p>博弈，打表。直接$O(n^3\log n)$预处理出所有子串及其权值，然后打表，记录一个$(win,A,B)$的三元组表示胜负状态和玩家分数，注意一个字符串中的同一个子串只算出现一次（如”aaaa”中，”aa”的出现次数为1）。</p> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Code</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; mp,w;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> win,S[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,node&gt; f;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getW</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">        mx=max(mx,s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">        sum+=s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum*mx+mp[s];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">1</span>^p;</span><br><span class="line">    <span class="keyword">if</span>(f.count(s))<span class="keyword">return</span> f[s];</span><br><span class="line">    node res;</span><br><span class="line">    res.win=<span class="number">0</span>;</span><br><span class="line">    res.S[p]=-INF;</span><br><span class="line">    res.S[q]=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> tt;</span><br><span class="line">        tt.push_back(<span class="keyword">char</span>(i+<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">        <span class="built_in">string</span> t=tt+s;</span><br><span class="line">        <span class="keyword">if</span>(mp.count(t))&#123;</span><br><span class="line">            node tmp=dfs(t,q);</span><br><span class="line">            <span class="keyword">if</span>(tmp.win==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp.S[p]==res.S[p]&amp;&amp;tmp.S[q]&lt;res.S[q]||tmp.S[p]&gt;res.S[p])&#123;</span><br><span class="line">                    res=tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                res.win=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.win==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp.S[p]==res.S[p]&amp;&amp;tmp.S[q]&lt;res.S[q]||tmp.S[p]&gt;res.S[p])&#123;</span><br><span class="line">                    res=tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                res.win=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t=s+tt;</span><br><span class="line">        <span class="keyword">if</span>(mp.count(t))&#123;</span><br><span class="line">            node tmp=dfs(t,q);</span><br><span class="line">            <span class="keyword">if</span>(tmp.win==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp.S[p]==res.S[p]&amp;&amp;tmp.S[q]&lt;res.S[q]||tmp.S[p]&gt;res.S[p])&#123;</span><br><span class="line">                    res=tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                res.win=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.win==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp.S[p]==res.S[p]&amp;&amp;tmp.S[q]&lt;res.S[q]||tmp.S[p]&gt;res.S[p])&#123;</span><br><span class="line">                    res=tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                res.win=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res.win==<span class="number">0</span>&amp;&amp;res.S[p]==-INF)&#123;</span><br><span class="line">        res.S[<span class="number">0</span>]=res.S[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.S[q]+=w[s];</span><br><span class="line">    <span class="keyword">return</span> f[s]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mp.clear();</span><br><span class="line">    w.clear();</span><br><span class="line">    f.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; se;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s[i].size();j++)&#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;s[i].size();k++)&#123;</span><br><span class="line">                tmp.push_back(s[i][k]);</span><br><span class="line">                se.insert(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j:se)&#123;</span><br><span class="line">            mp[j]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)&#123;</span><br><span class="line">        w[i.first]=getW(i.first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> emp;</span><br><span class="line">    node res=dfs(emp,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(res.win==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Bob\n&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Alice\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res.S[<span class="number">0</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;res.S[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近组队赛有点拉跨，于是个人vp加训，写写题解。&lt;/p&gt;
&lt;h2 id=&quot;A-Automatic-Judge&quot;&gt;&lt;a href=&quot;#A-Automatic-Judge&quot; class=&quot;headerlink&quot; title=&quot;A - Automatic Judge&quot;&gt;&lt;/a&gt;A</summary>
      
    
    
    
    <category term="个人训练" scheme="http://example.com/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="题解" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>计算数论习题选证</title>
    <link href="http://example.com/2021/02/09/%E8%AE%A1%E7%AE%97%E6%95%B0%E8%AE%BA%E4%B9%A0%E9%A2%98%E9%80%89%E8%AF%81/"/>
    <id>http://example.com/2021/02/09/%E8%AE%A1%E7%AE%97%E6%95%B0%E8%AE%BA%E4%B9%A0%E9%A2%98%E9%80%89%E8%AF%81/</id>
    <published>2021-02-08T18:57:50.000Z</published>
    <updated>2021-02-08T21:18:20.448Z</updated>
    
    <content type="html"><![CDATA[<p>这是为《A Computational Introduction to Number Theory and Algebra （Version 2）》（<a href="https://www.shoup.net/ntb/">资源</a>）中某些和ACM用数论有关的习题写的证明。<del>还没看完，好难QAQ</del></p><p><strong>EXERCISE 1.17</strong></p><p>已知正整数$a,b,c$满足$\gcd(a,b)=1$，$c\ge(a-1)(b-1)$，</p><p>求证：总是存在非负整数$s,t$满足$c=as+bt$</p><p>证明1：</p><p>当$s\in[0,b-1]$时$as$模$b$的结果恰好构成$b$的完全剩余系，</p><p>所以存在$s\in[0,b-1]$使$n\equiv as\mod b$成立，</p><p>此时$bt=c-as\ge (a-1)(b-1)-as=(b-1-s)a-(b-1)\ge -b+1$，</p><p>即$t\ge\frac{-b+1}{b}&gt;\frac{-b}{b}=-1$。$\Box$</p><p>证明2：</p><p>考虑其$c=as+bt$存在非整数解$(s,t)$的几何意义，</p><p>即直线$y=-\frac{b}{a}x+\frac{c}{a}$在第一象限（含坐标轴）过任意整点。</p><p><strong>EXERCISE 1.27</strong></p><p>已知$a,b\in Z$，</p><p>求证：$\gcd(a+b,\mathrm{lcm}(a,b))=\gcd(a,b)$</p><p>证明：</p><p>设$d=\gcd(a,b),s=\frac{a}{d},t=\frac{b}{d}$，</p><p>易知$\gcd(s,t)=1$，</p><p>$\gcd(a+b,\mathrm{lcm}(a,b))$</p><p>$=\gcd(d(s+t),\frac{ab}{d})$</p><p>$=d\gcd(s+t,st)$</p><p>又因$(s+t)\nmid s$且$(s+t)\nmid t$，$\gcd(s+t,st)=1$，</p><p>即$\gcd(a+b,\mathrm{lcm}(a,b))=d=\gcd(a,b)$。$\Box$</p><p><strong>EXERCISE 2.10</strong></p><p>求证：不存在$a,b$满足$7a^3+2=b^3$</p><p>证明：</p><p>若$7a^3+2=b^3$，</p><p>则有$7a^3+2\equiv b^3\mod7$，</p><p>即$2=b^3\mod7$</p><p>由于$(b+7)^3\equiv b^3\mod7$，</p><p>且$1^3\equiv2^3\equiv1,3^3\equiv5^3\equiv6^3\equiv6,4^3\equiv4,7^3\equiv0$，</p><p>因此$7a^3+2=b^3$不成立。$\Box$</p><p><strong>EXERCISE 2.12</strong></p><p>已知整数$a_1,a_2,..a_k,b$和正整数$n$，设$d=\gcd(a_1,…,a_k,n)$，</p><p>求证：$a_1x_1+a_2x_2+…+a_kx_k \equiv b\mod n$有解$\{x_i\}_{i=1}^{k}$当且仅当$d|b$</p><p>暂无想法，待证</p><p><strong>EXERCISE 2.13</strong></p><p>暂无想法，待证</p><p><strong>EXERCISE 2.16</strong></p><p>已知$\{n_i\}_{i=1}^{k}$两两互质，对于整数$\{a_i\}_{i=1}^k,\{b_i\}_{i=1}^k$，设$d_i=\gcd(a_i,n_i)$，</p><p>求证：存在$x$满足$\forall i \in [1,k], a_ix\equiv b_i\mod n_i$当且仅当$\forall i\in[1,k],d_i|b_i$</p><p>暂无想法，待证</p><p><strong>EXERCISE 2.23</strong></p><p>求证：$\varphi(nm)=\gcd(n,m)*\varphi(\mathrm{lcm}(n,m))$</p><p>证明：</p><p>$n=\prod p_{i}^{a_i},m=\prod p_{i}^{b_i}$，</p><p>$\gcd(n,m)=\prod p_{i}^{min(a_i,b_i)},\mathrm{lcm}(n,m)=\prod p_{i}^{max(a_i,b_i)}$，</p><p>$\gcd(n,m)<em>\varphi(\mathrm{lcm}(n,m))=\prod p_{i}^{min(a_i,b_i)}</em>\prod p_{i}^{max(a_i,b_i)-1}(p_i-1)$</p><p>$=\prod p_{i}^{a_i+b_i-1}(p_i-1)=\varphi(nm)$。$\Box$</p><p><strong>EXERCISE 2.24</strong></p><p>已知$n$有$r$个不同的奇质因子，</p><p>求证：$2^r|\varphi(n)$</p><p>证明：</p><p>$\varphi(n)=\prod p_{i}^{e_i-1}(p_i-1)$，</p><p>其中$r$个奇质因子的贡献为$\prod_{i=1}^{r} p_i^{e_i-1}(p_i-1)$，</p><p>又因$p_i^{e_i-1}\ge1$且$p_i-1\equiv0\mod2$，</p><p>因此$2^r|\varphi(n)$。$\Box$</p><p><strong>EXERCISE 2.25</strong></p><p>定义$\varphi_{2}(n)=\sum_{i=0}^{n-1}[\gcd(i,n)=1\land\gcd(i+1,n)=1]$，</p><p>求证：对于$n=\prod_{i=1}^{r}p_i^{e_i}$，$\varphi_2(n)=n\prod_{i=1}^r(1-2/p_i)$</p><p>证明：</p><p>考虑$n’=p^e$，对于所有的$a\in[0,n’-1]$，不满足$\gcd(a,n’)=1\land\gcd(a+1,n’)=1$的值有：</p><p>$0\times p,1\times p-1,1\times p,$</p><p>$2\times p-1,2\times p,$</p><p>$…,$</p><p>$(p^{e-1}-1)\times p-1,(p^{e-1}-1)\times p，p^e-1$</p><p>将$i\times p-1$与$i\times p$配对，将$0\times p$与$p^e-1$配对，</p><p>发现共有$p^{e-1}$对不满足条件的数，</p><p>因此$\varphi_2(p^e)=p^e-2p^{e-1}=p^e(1-2/p)$，</p><p>故$\varphi(n)=\prod_{i=1}^{r}p_i^{e_i}(1-2/p_i)=n\prod_{i=1}^r(1-2/p_i)$。$\Box$</p>]]></content>
    
    
    <summary type="html">呜呜，数学好难</summary>
    
    
    
    <category term="数学" scheme="http://example.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="数论" scheme="http://example.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Namomo-Camp-2021-day4-构造</title>
    <link href="http://example.com/2021/02/09/Namomo-Camp-2021-day4-%E6%9E%84%E9%80%A0/"/>
    <id>http://example.com/2021/02/09/Namomo-Camp-2021-day4-%E6%9E%84%E9%80%A0/</id>
    <published>2021-02-08T18:56:39.000Z</published>
    <updated>2021-02-08T21:11:27.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020ICPC济南J"><a href="#2020ICPC济南J" class="headerlink" title="2020ICPC济南J"></a>2020ICPC济南J</h2> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题意</span></div>    <div class="xContent"><div class="inner">        <p>给一棵树上的所有点赋值使得$u,v$间有边当且仅当$w[u]|w[v]=2^{60}-1$（’$|$’为二进制按位或）</p>     </div></div>    </div> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题解</span></div>    <div class="xContent"><div class="inner">        <p>为了方便构造，我们对这棵树进行黑白染色，</p><p>为了防止同色点之间产生边，可以令黑点权值二进制前两位为$01$，白点为$10$，</p><p>再考虑对构造方法增加限制以方便构造，</p><p>由题意得，权值的二进制最大可以有$60$位，</p><p>显然，点数较少的一种颜色（以下当作白色）不会超过$50$种，</p><p>因此，我们可以增加一个限制：所有白点权值二进制中有且仅有一个$0$，</p><p>这样就能构造出一组权值互不相同的白点，</p><p>有了白点，黑点就可以直接确定了，例如</p><p><img src="2020icpc-jn-j.png" style="zoom:50%;" /></p><p>如果$w[1]=11…1110,w[4]=11…1101,w[5]=11…1011$（忽略前两位$01$和$10$，下同），</p><p>则$w[2]=00…0001,w[3]=00…0111,w[6]=w[7]=00…0010$，</p><p>此时白点的$0$位就相当于钥匙孔，黑点的$1$就相当于钥匙，一个钥匙（黑点）必须能打开周围的所有锁，</p><p>这样想，边的关系就确定了，游戏结束。</p>     </div></div>    </div> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>代码</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = (<span class="number">1LL</span> &lt;&lt; <span class="number">60</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N], d[<span class="number">2</span>], t, cnt;</span><br><span class="line">ll c[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    b[u] = b[fa] ^ <span class="number">1</span>;</span><br><span class="line">    c[u] |= <span class="number">1LL</span> &lt;&lt; (<span class="number">59</span> - b[u]);</span><br><span class="line">    d[b[u]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u])</span><br><span class="line">        <span class="keyword">if</span> (v != fa)</span><br><span class="line">            dfs(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (d[<span class="number">0</span>] &gt; d[<span class="number">1</span>])t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] == t) &#123;</span><br><span class="line">            c[i] |= (<span class="number">1LL</span> &lt;&lt; cnt);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] != t) &#123;</span><br><span class="line">            ll tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> j : G[i])</span><br><span class="line">                <span class="keyword">if</span> (b[j] == t)</span><br><span class="line">                    tmp |= c[j];</span><br><span class="line">            c[i] = M ^ tmp;</span><br><span class="line">            c[i] &amp;= (M - (<span class="number">1LL</span> &lt;&lt; <span class="number">59</span>));</span><br><span class="line">            c[i] &amp;= (M - (<span class="number">1LL</span> &lt;&lt; <span class="number">58</span>));</span><br><span class="line">            c[i] |= <span class="number">1LL</span> &lt;&lt; (<span class="number">59</span> - b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)c[i] ^= M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">cout</span> &lt;&lt; c[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="2020ICPC济南E"><a href="#2020ICPC济南E" class="headerlink" title="2020ICPC济南E"></a>2020ICPC济南E</h2> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题意</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题解</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>代码</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div><h2 id="证明题"><a href="#证明题" class="headerlink" title="证明题"></a>证明题</h2> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>命题</span></div>    <div class="xContent"><div class="inner">        <p>对任意$2n-1$个数，一定存在$n$个数使其和为$n$的倍数</p>     </div></div>    </div> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>证明</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>构造问题的一般思路：</p><ul><li>增量构造，从$f(n-k)$到$f(n)$，一般要正推</li><li>递归构造，从$f(\frac{n}{k})$到$f(n)$，一般要逆推</li><li>转移构造，【从$f$到$g$】等价于【先从$f$到$h$，再从$h$到$g$】</li><li>增加限制，当构造自由度太高时可以视情况增加一些限制</li><li>待定参数，先考虑答案的状态，将其中一些参数设为未知，然后求出参数和答案的关系</li><li>调整构造，先按照某种方法构造出近似解，然后按照某种原则微调至答案</li><li>随机构造，利用题目里的随机性构造答案，一般和概率的计算有关</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2020ICPC济南J&quot;&gt;&lt;a href=&quot;#2020ICPC济南J&quot; class=&quot;headerlink&quot; title=&quot;2020ICPC济南J&quot;&gt;&lt;/a&gt;2020ICPC济南J&lt;/h2&gt; &lt;div class=&quot;xControl&quot;&gt;
    &lt;div clas</summary>
      
    
    
    
    <category term="Namomo Camp 2021" scheme="http://example.com/categories/Namomo-Camp-2021/"/>
    
    
    <category term="Namomo Camp" scheme="http://example.com/tags/Namomo-Camp/"/>
    
    <category term="构造" scheme="http://example.com/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>Namomo-Camp-2021-day1-DP</title>
    <link href="http://example.com/2021/02/09/Namomo-Camp-2021-day1-DP/"/>
    <id>http://example.com/2021/02/09/Namomo-Camp-2021-day1-DP/</id>
    <published>2021-02-08T18:27:51.000Z</published>
    <updated>2021-02-08T21:05:11.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="luoguP2612"><a href="#luoguP2612" class="headerlink" title="luoguP2612"></a><a href="https://www.luogu.com.cn/problem/P2612">luoguP2612</a></h2> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题意</span></div>    <div class="xContent"><div class="inner">        <p>设一个排列的权值为相邻两数差的绝对值之和，求长度为$n$的随机排列权值不小于$m$的概率（$n\le100$）</p>     </div></div>    </div> <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题解</span></div>    <div class="xContent"><div class="inner">        <p>考虑一个填完的排列中每个数对答案的贡献，</p><p>设当前填的数为$b$，其前后的数分别为$a$和$c$，则有三种情况：</p><ol><li>当$[a&lt;b\land c&lt;b]==1$时，答案要加上$|a-b|+|b-c|=2\times b-a-c$，$b$对答案的贡献为$2\times b$</li><li>当$[a&lt;b\oplus c&lt;b]==1$时，答案要加上$|a-b|+|b-c|=|a-c|$，$b$对答案的贡献为$0$</li><li>当$[a&gt;b\land c&gt;b]==1$时，答案要加上$|a-b|+|b-c|=a+c-2\times b$，$b$对答案的贡献为$-2\times b$</li></ol><p>为了消去绝对值的影响，我们从小到大填数。</p><p>在从小到大填数时，出现情况1说明填当前位置时左右都非空，出现情况2说明左右有一个非空，出现情况3说明左右都为空，而且如果填在两端要特殊处理一下。</p><p>考虑用$f(i,j,k,t)$表示已经填了$i$个数，构成了$j$个连续段，答案为$k$，有$t$个端点填了数的方案数，其中$i\in[0,n],j\in[0,\lceil\frac{n}{2}\rceil],k\in[-4500,4500],t\in[0,2]$，</p><p>如果不填在两端，根据上面的情况，有三种转移方式：</p><p>$f(i,j,k,l)\longrightarrow f(i+1,j,k,l)$</p><p>$f(i,j,k,l)\longrightarrow f(i+1,j+1,k-2\times i,l)$</p><p>$f(i,j,k,l)\longrightarrow f(i+1,j-1,k+2\times i,l)$</p><p>如果填在两端，有两种转移方式（端点旁边是否有数）：</p><p>$f(i,j,k,l)\longrightarrow f(i,j,k+i,l+1)$</p><p>$f(i,j,k,l)\longrightarrow f(i,j+1,k-i,l+1)$</p><p>转移时注意乘上可以选择的方案数。</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>代码</span></div>    <div class="xContent"><div class="inner">        <p>这题着实恶心，得面向数据范围编程，$k\le8$用long double，否则用__float128才能过，<del>所以写的又臭又长</del>，这里只放了dp部分的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][D][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> from = ~i &amp; <span class="number">1</span>, to = i &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(f[to], <span class="number">0</span>, <span class="keyword">sizeof</span> f[to]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= min(i - <span class="number">1</span>, m); j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; M; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">3</span>; t++) &#123;</span><br><span class="line">                ff = f[from][j][k][t];</span><br><span class="line">                <span class="comment">//分别对应上面的转移方式</span></span><br><span class="line">                <span class="keyword">if</span> (j)f[to][j][k][t] += ff * (<span class="number">2</span> * j - t);</span><br><span class="line">                <span class="keyword">if</span> (k - <span class="number">2</span> * i &gt;= <span class="number">0</span>)f[to][j + <span class="number">1</span>][k - <span class="number">2</span> * i][t] += ff * (j + <span class="number">1</span> - t);</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; k + <span class="number">2</span> * i &lt; M)f[to][j - <span class="number">1</span>][k + <span class="number">2</span> * i][t] += ff * (j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (t &lt; <span class="number">2</span> &amp;&amp; j &amp;&amp; k + i &lt; M)f[to][j][k + i][t + <span class="number">1</span>] += ff * (<span class="number">2</span> - t);</span><br><span class="line">                <span class="keyword">if</span> (t &lt; <span class="number">2</span> &amp;&amp; k - i &gt;= <span class="number">0</span>)f[to][j + <span class="number">1</span>][k - i][t + <span class="number">1</span>] += ff * (<span class="number">2</span> - t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="CF908G"><a href="#CF908G" class="headerlink" title="CF908G"></a><a href="https://codeforces.com/contest/908/problem/G">CF908G</a></h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题意</span></div>    <div class="xContent"><div class="inner">        <p>$S(n)$为$n$所有位数非降序排列后的数值，求$\sum_{i=1}^X S(i)\mod 10^9+7$（$X\le10^{700}$）</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题解</span></div>    <div class="xContent"><div class="inner">        <p><del>应该是自己做过的第三道数位dp，数位dp好难啊</del></p><p>看这个数据范围，$10^{700}$，显然是数位dp，但有一说一确实挺怪的，</p><p>河里猜测，状态数应该是$700\times 700\times 10\times x$，</p><p><del>然后就不会了（</del></p><p>看了别人的题解，发现其实还是挺好懂的，</p><p>举个例子，$S(114514)$可以拆成三部分的贡献：$S(114514)=111445=111111+111+1$（其实是九部分，对应$1-9$），</p><p>因此可以分别枚举每个位置产生的贡献之和，然后分别加起来，</p><p>具体来说就是</p><p>没写完</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>代码</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">710</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> X;</span><br><span class="line">ll f[N][<span class="number">10</span>][N][<span class="number">2</span>], ans, p10[N];</span><br><span class="line"><span class="function">ll <span class="title">dp</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> num, <span class="keyword">int</span> m, <span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (t == X.size())<span class="keyword">return</span> !m;</span><br><span class="line">    <span class="keyword">if</span> (f[t][num][m][lim] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> f[t][num][m][lim];</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (lim) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= X[t] - <span class="string">&#x27;0&#x27;</span>; i++) &#123;</span><br><span class="line">            res = (res + dp(t + <span class="number">1</span>, num, m - (i &gt;= num), i == X[t] - <span class="string">&#x27;0&#x27;</span>)) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            res = (res + dp(t + <span class="number">1</span>, num, m - (i &gt;= num), <span class="number">0</span>)) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[t][num][m][lim] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; X;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    p10[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)p10[i] = p10[i - <span class="number">1</span>] * <span class="number">10</span> % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)p10[i] = (p10[i - <span class="number">1</span>] + p10[i]) % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= X.size(); j++) &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;: &quot; &lt;&lt; (p10[j - 1]*dp(0, i, j, 1)) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">            ans = (ans + (p10[j - <span class="number">1</span>]) * dp(<span class="number">0</span>, i, j, <span class="number">1</span>) % MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="CF1142D"><a href="#CF1142D" class="headerlink" title="CF1142D"></a><a href="https://codeforces.com/contest/1442/problem/D">CF1142D</a></h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题意</span></div>    <div class="xContent"><div class="inner">        <p>给定$n$个非降序排列的数组，第$i$个数组长度为$t_i$，每次操作可以取出任意数组最左边的数（相当于删除）并加到答案里，求$k$次操作后的最大答案（$n,k\le3000$）</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题解</span></div>    <div class="xContent"><div class="inner">        <p>一个显然的结论是，最多只有一个数组被取数但没有被全取完，利用反证法容易证明。</p><p>根据这个结论，最暴力的办法就是考虑枚举没选中的数组然后对其他的做一遍背包，</p><p>但是这是$O(n^2k)$的，显然会超时，s思考后发现，在枚举不同数组进行背包的时候，只有两个物品不同，其他$n-2$个都是一样的，</p><p>因此可以考虑如何重复使用这些物品，起码要优化到$O(nk\log n)$才行，</p><p>既然带了个$\log$，大概率要用线段树，</p><p>朝着这个方向想想，结果就出来了，</p><p>我们可以在线段树节点$(i,l,r)$上用$f(i)$来储存除了$l,r$数组之外的所有物品做$01$背包后的结果，</p><p>这样就把$n^2k$枚举时的加减物品变成了从根到叶的加物品操作，</p><p>叶节点即为之前所枚举的没有被全取完的数组，复杂度$O(nk\log n)$。</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>代码</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3030</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">4e18</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; a[N], f[N], now;</span><br><span class="line"><span class="keyword">int</span> n, k, t[N];</span><br><span class="line">ll sum[N], ans;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">dp</span><span class="params">(<span class="built_in">vector</span>&lt;ll&gt; &amp;v, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; res = v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= a[i].size(); j--) &#123;</span><br><span class="line">            res[j] = max(res[j], res[j - a[i].size()] + sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ans = max(ans, now[k]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= min(k,(<span class="keyword">int</span>)a[l].size()); i++) &#123;</span><br><span class="line">            res += a[l][i - <span class="number">1</span>];</span><br><span class="line">            ans = max(ans, res + now[k - i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; tmp = now;</span><br><span class="line">    now = dp(tmp, mid + <span class="number">1</span>, r);</span><br><span class="line">    solve(l, mid);</span><br><span class="line">    now = dp(tmp, l, mid);</span><br><span class="line">    solve(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    now.resize(k + <span class="number">1</span>, -INF);</span><br><span class="line">    now[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, tt; j &lt;= t[i]; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tt;</span><br><span class="line">            a[i].push_back(tt);</span><br><span class="line">            sum[i] += tt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="300iq-Contest-3-C"><a href="#300iq-Contest-3-C" class="headerlink" title="300iq Contest 3 C"></a><a href="https://codeforces.com/gym/102538/problem/C">300iq Contest 3 C</a></h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题意</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题解</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>代码</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3030</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line">ll ans, cnt;</span><br><span class="line"><span class="keyword">int</span> a[N][N], b[N][N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s[i][j];</span><br><span class="line">            cnt += s[i][j] == <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            a[i][j] |= a[i - <span class="number">1</span>][j] | a[i][j - <span class="number">1</span>];</span><br><span class="line">            a[i][j] |= i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>;</span><br><span class="line">            a[i][j] &amp;= s[i][j] == <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">            b[i][j] |= b[i + <span class="number">1</span>][j] | b[i][j + <span class="number">1</span>];</span><br><span class="line">            b[i][j] |= i == n &amp;&amp; j == m;</span><br><span class="line">            b[i][j] &amp;= s[i][j] == <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!a[n][m]) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt*(cnt - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a[i][j] || !b[i][j]) &#123;</span><br><span class="line">                s[i][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ve[i + j].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ve[i].size() == <span class="number">1</span>)ans += --cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ve[i].size() == <span class="number">2</span>)ans++;</span><br><span class="line">        <span class="keyword">if</span> (ve[i].size())sort(ve[i].begin(), ve[i].end());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ve[i].size() == <span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> l = ve[i][<span class="number">1</span>], r = ve[i].back();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n + m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[l][j - l] != <span class="string">&#x27;.&#x27;</span>)l++;</span><br><span class="line">            <span class="keyword">if</span> (s[r + <span class="number">1</span>][j - (r + <span class="number">1</span>)] == <span class="string">&#x27;.&#x27;</span>)r++;</span><br><span class="line">            <span class="keyword">if</span> (l == r &amp;&amp; ve[j].size() != <span class="number">1</span>)ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ve[i].size() == <span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> l = ve[i][<span class="number">0</span>], r = ve[i][ve[i].size() - <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n + m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[l][j - l] != <span class="string">&#x27;.&#x27;</span>)l++;</span><br><span class="line">            <span class="keyword">if</span> (s[r + <span class="number">1</span>][j - (r + <span class="number">1</span>)] == <span class="string">&#x27;.&#x27;</span>)r++;</span><br><span class="line">            <span class="keyword">if</span> (l == r &amp;&amp; ve[j].size() != <span class="number">1</span>)ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="CF729F"><a href="#CF729F" class="headerlink" title="CF729F"></a><a href="https://codeforces.com/contest/729/problem/F">CF729F</a></h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题意</span></div>    <div class="xContent"><div class="inner">        <p>给定一长度为$n$的数组，$A$和$B$分别从左右端取数字加到自己身上，设$A,B$的分数分别为$W_A,W_B$，$S=W_A-W_B$，$A$想让$S$更大，$B$想让$S$更小，$A,B$都会采取最优策略，求最终$S$的值（$n\le4000$）</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题解</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>代码</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4040</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">66</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], s[N];</span><br><span class="line"><span class="keyword">int</span> f[N][M &lt;&lt; <span class="number">1</span>][M][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[N][M &lt;&lt; <span class="number">1</span>][M][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s[r] - s[l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">bool</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = v ? INF : -INF, l = x, r = n + <span class="number">1</span> - (x - (y - M));</span><br><span class="line">    <span class="keyword">if</span> (vis[x][y][z][v])<span class="keyword">return</span> f[x][y][z][v];</span><br><span class="line">    vis[x][y][z][v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= z + <span class="number">1</span> &amp;&amp; k &lt;= r - l - <span class="number">1</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v)res = min(res, dp(x, y - k, k, !v) - sum(r - k, r - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> res = max(res, dp(x + k, y + k, k, !v) + sum(l + <span class="number">1</span>, l + k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(res) == INF)res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> f[x][y][z][v] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp(<span class="number">0</span>, M, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="2019CCPC秦皇岛G"><a href="#2019CCPC秦皇岛G" class="headerlink" title="2019CCPC秦皇岛G"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6737">2019CCPC秦皇岛G</a></h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题意</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>题解</span></div>    <div class="xContent"><div class="inner">        <p>在写了在写了</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>代码</span></div>    <div class="xContent"><div class="inner">        <p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N][N], f[<span class="number">1</span> &lt;&lt; <span class="number">24</span>];</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b, w;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; pb, pw;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n + n); i++) &#123;</span><br><span class="line">            f[i] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ed = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>, st = (<span class="number">1</span> &lt;&lt; n + n) - <span class="number">1</span> - ed;</span><br><span class="line">        f[st] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = st; x &gt;= ed; x--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (__builtin_popcount(x) != n)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> y, A = <span class="number">0</span>, B = <span class="number">1</span>;</span><br><span class="line">            b.clear();</span><br><span class="line">            w.clear();</span><br><span class="line">            pb.clear();</span><br><span class="line">            pw.clear();</span><br><span class="line">            <span class="keyword">if</span> (x &amp; <span class="number">1</span>)B++;</span><br><span class="line">            <span class="keyword">else</span> A++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((x &gt;&gt; i - <span class="number">1</span>) &amp; <span class="number">1</span>) &amp;&amp; ((x &gt;&gt; i) &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[A][B] == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">                        b.push_back(i);</span><br><span class="line">                        pb.push_back(&#123;A, B&#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[A][B] == <span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">                        w.push_back(i);</span><br><span class="line">                        pw.push_back(&#123;A, B&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    y = x ^ (<span class="number">1</span> &lt;&lt; i) ^ (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>);</span><br><span class="line">                    f[y] = min(f[y], f[x] + a[A][B]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>)B++;</span><br><span class="line">                <span class="keyword">else</span> A++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w.size(); j++) &#123;</span><br><span class="line">                    y = x ^ (<span class="number">1</span> &lt;&lt; b[i]) ^ (<span class="number">1</span> &lt;&lt; b[i] - <span class="number">1</span>) ^ (<span class="number">1</span> &lt;&lt; w[j]) ^ (<span class="number">1</span> &lt;&lt; w[j] - <span class="number">1</span>);</span><br><span class="line">                    f[y] = min(f[y], f[x] + <span class="built_in">abs</span>(a[pb[i].first][pb[i].second] - a[pw[j].first][pw[j].second]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[ed]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><ul><li>[ ] <a href="https://codeforces.com/gym/102900/problem/F">2020ICPC上海F</a></li><li>[ ] <a href="https://codeforces.com/contest/1428/problem/G2">CF1428G</a></li><li>[ ] <a href="https://codeforces.com/contest/1383/problem/C">CF1383C</a></li><li>[ ] <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6566">2018CCPC吉林</a></li><li>[ ] DTOJ4632（没找到链接）</li></ul>]]></content>
    
    
    <summary type="html">Namomo-Camp-2021-day1-DP</summary>
    
    
    
    <category term="Namomo Camp 2021" scheme="http://example.com/categories/Namomo-Camp-2021/"/>
    
    
    <category term="Namomo Camp" scheme="http://example.com/tags/Namomo-Camp/"/>
    
    <category term="DP" scheme="http://example.com/tags/DP/"/>
    
  </entry>
  
</feed>
