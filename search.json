[{"title":"20220306周赛","date":"2022-03-07T14:53:00.000Z","url":"/2022/03/07/20220306%E5%91%A8%E8%B5%9B/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["个人训练","/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"]],"content":"A 贪心牛逼贪心，真的神秘。 在和牛逼学弟$B.White$讨论后，产生了以下思路： 若$a_{1}…a_{x}$是一个$1$到$x$的排列，我们称$a$是饱和的。 考虑$p$的任意饱和前缀$p_1…p_{i}$，若这$i$个数能被划分为两个上升序列，则这一段无论如何划分，和$p_{i+1}…p_n$都是互不影响的。 证明：$p_{i+1}…p_{n}$中的任意元素都比$p_1…p_i$大，所以后面划分的两个序列可以随意拼接到前面两个序列后面。 由上得，所有饱和前缀与其剩余部分的结果相互独立，我们可以处理出所有饱和前缀，然后用这些前缀的位置把$p$划分为多个独立的饱和段，所有饱和段互不影响。 此时，我们只需要求出所有饱和段的划分结果，然后所有饱和段的最大值减去最小值之和就是最终的答案。 考虑如何求出某一个饱和段的答案，我们有以下结论： 对于一个饱和段，其不含有任何饱和前缀 对于一个饱和段，其最终形成的两个序列唯一 从头开始，每次找到比当前大的数直到没有，此时形成的序列一定是两个序列之一（或者无合法序列） 证明： 假设饱和段中存在一个饱和前缀，则其会产生两个新的饱和段，这和前提（找出所有$p$的饱和前缀划分为多个饱和段）矛盾，因此1得证。 考虑一个饱和段中，元素$a$后面第一个比他大的数为$b$，则有三种情况： $b$不存在，此时$a$后面所有元素一定不和$a$属于一个序列 $a,b$相邻/不相邻，此时在一个序列中$a$后面一定紧接$b$ 证明：由(1)知饱和段中没有饱和前缀，则存在其他比$a$小且在$a$之后的数$c$会放在和$a$相异的另一个上升序列中，由于$c&lt;a&lt;b$，我们只能将$b$放在$a$后面 当序列中每一个数作为$a$时，根据以上规则，我们都会将$b$后面第一个大于$a$的数放在$a$后面，因此序列的位置关系是确定的，(2),(3)得证。 由(3)知，我们可以遍历一遍获得一个上升序列，然后把剩下的放到另一个序列里，若剩下的数无序则无解。 总复杂度$O(n)$。 感觉把std踩了，这个线性做法是目前CF上跑的最快的 B 签到当$n$为奇数时，这$n$个数模$k$同余；当$n$为偶数时，按照位置奇偶性构成两个模$k$同余的等价类或。 需要特判$(4,3 )$，因为此时模$k$的结果为$0,1,2,0$，$(1+3)\\%3=0$，但是只有$(4,3)$这一种情况是特殊的（证明思路可以考虑$0$必须在图中出现$\\frac{n}{2}$次） C 图论涉及中位数最值问题可以考虑二分答案，此时图中所有点权变为$1$或$-1$，问题转化成判断是否存在一条$1$到$n$的点权为正的路径。关于SPFA，它死了 考虑点权的特殊性，可以推出以下结论，下面$(a,b)$表示一条连接两点权值分别为$a,b$的边： 如果存在一条$(1,1)$边，一定可行（在这条边上来回走） 如果存在一条$(-1,-1)$边，我们不会去走（因为走$(-1,-1)$需要用$(1,1)$来补正） 如果我们只走$(1,-1)$和$(-1,1)$边，当且仅当$c_1=c_n=1$时可行。 DFS/BFS/DSU判断即可。复杂度$O((n+m)\\log10^9)$ D 签到E 几何推$O(1)$公式 (x) 无脑$O(\\log\\frac{1}{eps})$二分 (√) 直接二分半径，然后判断和边界是否有交点（点到线段距离），注意判断线段叉乘时精度要在$10^{-9}$以上。 计算几何嘛 WA了改改精度多交几发 Part 2: $O(1)$公式的推导 todo F 签到G 字符串还没补，目前进度MLE84/TLE64 H 图论读题面中所给代码，得知其作用是标记所有和$v$联通且$\\Delta=a-b=a_{v}-b_{v}$的点，然后把这些点的$\\Delta$都置零。 如果暴力进行1和3操作，发现对点的访问次数均摊后是线性的（一次1操作改变一个点，一次3操作把修改过的点还原），复杂度瓶颈在于1和3操作过程中需要遍历所有邻接边，因此考虑优化这个过程使得我们不需要遍历边而获得所有权值相等的连通点集。 我们可以用set来记录一个$(a_x-b_x,x)$的pair，每次从某个点开始dfs的时候就直接在set上二分，这样3操作的复杂度就合理了。 但是此时1操作修改树上节点时，还需要遍历并更新所有邻接点的set，瓶颈依旧在。如果只考虑以上做法，可以发现对于图也是一样的，此时并没有利用到树的性质。 假设我们定$1$为根，set里只记录子节点，此时对于1操作，我们只需要修改其父亲的set，因为子节点要访问父亲的时候直接寻找$a_{father}$就够了。而对于3操作，我们直接往根走直到$\\Delta$不相等，然后dfs子树的set。 I 线段树先把所有数放到$[0,10^6]$的桶里，设其为$b$，则一个非零$MEX$值$x$可以取的时候必有$b[x]=x$，所以考虑用线段树维护$b_i-i$的区间最值。当加入一个数$a$的时候对应$[a:10^6]+1$，减去的时候对应$[a:10^6]-1$。对于查询就直接在线段树上递归查询最右侧的合法位置，总复杂度$O(q\\log10^6)$。 J 构造一个显然的结论是，所有行和列的$MEX$都有且只有一个数不为$0$，且至少有一个为$1$。 所以可以先找出$0$的位置，然后对这一行和列填充小于$MEX$的数，空余位置可以用最大的数补全。其他行列就随便填了。 K 并查集每次操作翻转两块，说明$1$和$0$的差奇偶性不变。如果我们将每次操作的两个位置连一条边，会发现每次操作会减少连通块中两个$1$或不变，因此只要带权并查集统计一下所有连通块内$1$的个数是否是偶数即可。 L dp问题等价于求有多少种从底部走到某个端点的路径。考虑$f_{i,j}$表示从$(1,1)$到$(i,j)$的路径数，则有 f_{i,j}=f_{i-1,j-1}+f_{i-1,j}有效状态最多$n$个，用map记录然后转移即可。 M 快速幂 \\sum_{i=a}^{b}\\sum_{j=c}^{d}2^{i}3^{j}=S(b,d)-S(a-1,d)-S(c,b-1)+S(a-1,b-1)\\\\ S(a,b)=\\sum_{i=0}^{a}\\sum_{j=0}^{b}2^i3^j=\\sum_{i=0}^{a}2^i\\sum_{j=0}^{b}3^j=\\frac{2^{a+1}-1}{2-1}\\times\\frac{3^{b+1}-1}{3-1}"},{"title":"20220227周赛","date":"2022-02-27T16:59:09.000Z","url":"/2022/02/28/20220227%E5%91%A8%E8%B5%9B/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["个人训练","/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"]],"content":"A 最短路 dp赛中直接每次询问暴力Dijkstra，$O(qn\\log n)$就能过，属于是CF神机太快了。 正解应该是dp，用$f_{c,i,j}$表示经过了$c$条边（$c+1$个点）后，$i$到$j$的最短距离，于是有转移 f_{c,i,v}=\\min(f_{c,i,v},f_{c-1,i,u}+w)\\ \\ e(u,v,w)\\in E因此每次可以在$O(nm)$时间内处理出经过$c$个点的最短路，此时再$O(q)$更新所有询问的答案，对于询问$q(u,v,x)$，答案即为$min(f_{c,u,v}+c\\times x)$，总复杂度$O(n^2m+nq)$。也就只比暴力快了400ms Code B 签到阅读理解，看懂题目所给公式就会了。 如果要让结果最大，就要选取所有权值为奇数的边，因此答案就是所有奇边权之积，注意没有奇数边权输出$1$。 Code C kmp题意即求所有子串的最长公共前后缀长度之和。 由于$length\\le5000$，对于所有起始位置跑一遍kmp，得到的next数组（前缀函数）就是最长公共前后缀，求和即可。 Code D 模拟纯模拟，建议写个函数单独提出x前后的数字，用map记录次数相同的项，求导就是$(ax^b)’=abx^{b-1}$。注意当求导后没有任何项的时候要输出0。 Code E 构造原问题等价于给树上的每条边确定一个方向使得有最多的边满足入度=出度（称其为平衡），其拓扑序即为答案。 首先如果一个点的度为奇数显然不可能平衡，那么我们只需要考虑使度数为偶的点平衡。 先只考虑所有度数为偶数的点组成的图$G’$，一个显然的结论是，只要这张图所有点的入/出度都不大于其度数的一半，则所有点一定能被平衡（用度数为奇数的点调整），所以怎么舒服怎么写就可以了。 Code F adhoc考虑把原来的操作2转化一下。可以发现，操作2等价于把矩阵的最后一列往下，然后整列插到第一列前面。 因此我们可以记录一下哪里是当前矩阵的最后一列，每次操作2不做实质上的移动，只维护最后一列的位置，然后$O(n)$将最后一列往下移动。注意此时操作1也要根据最后一列的位置调整修改的坐标。 Code G 重链剖分 线段树一道比较直球的数据结构题，给一棵带点权的树，需要支持： 询问任意两点路径上的权值和 对任意子树增加一个关于深度的等差数列 涉及动态子树加+维护树上路径和，显然得套个重链剖分，假设我们能用线段树维护每条链的结果，这样1就解决了。 考虑2操作在一条链上如何维护，即如何在数组上实现区间加等差数列+询问区间和。可以发现等差数列是可以合并的，我们可以将加在$i\\in[l,r]$上的等差数列$s+(i-l)\\times d$移动一下，转化为$(s-l\\times d)+(i\\times d)$，如此我们就能把整个数组分成两部分信息维护（设其为$a$和$b$）并且预处理出线段树上每个区间的$\\sum i$，每次区间加操作时，对于当前节点就有$a+=(s-l\\times d),\\ b+=(\\sum i)\\times d$。 转换到树上，就相当于把上面的$i$全都改成$i$节点的深度。dfs序建线段树然后维护等差数列拆出来的两部分，每次询问$(u,v)$再拆成$query(v)+query(u)-2\\times query(lca(u,v))+w_{lca(u,v)}$，$query(u)$表示从$u$到根的路径和，处理时直接暴力往根跳最多$\\log$条链到根，每次在线段树上询问一段连续dfs序的和。总复杂度$O(n\\log^2 n)$。 会爆ll，要用__int128 写起来真的恶心 都算得上是大模拟了 Code H 数学由于数据范围较小，可以直接模拟，从头开始到$t$时刻每次找到$C$和$A,B$相交的时间，注意处理$B$恰好到达$d$而第三个人从$A$前往$B$处的情况（因为这个到结束都没改出来）。本题不卡精度，很良心。 Code I 网络流设表示人的点集为$L$，表示问题的点集为$R$，如果在$L$和$R$之间连上权值为时间的边，显然这是张带权二分图，问题转化成用最小的代价选取边满足： 使得所有点度数不为$0$ 图中没有长度大于$2$的路径（假设存在长度为$3$的路径，可以看看会发生什么） 考虑数据范围（$n\\le 200,m\\le n^2$）以及限制，先猜一手网络流。 首先考虑只有限制$1$的情况，我们将源点$S$连向$L$中的每个点，将$R$中的每个点连向汇点$T$，这些边的流量在$[1,n]$内，费用为$0$；将所给边$e(u,v,w)$变成从$u$到$v$流量为$1$，费用为$w$的边，答案即为 Code J 计算几何牛逼防AK计算几何，扔了。 K 树状数组题意就是求对于所有红点求出其到最近的蓝点的曼哈顿距离之和。 考虑两点曼哈顿距离的公式$|x_1-x_2|+|y_1+y_2|$，实际上拆开绝对值符号一共有四种情况，以$x_1-x_2+y_1-y_2$为例： 我们先按照$x$坐标排序，枚举$x_1$同时用树状数组维护下标为$y_2$时的贡献（$-y_2-x_2$），因为是按$x$升序排序，可以保证$x_1\\le x_2$，在树状数组上查询所有不大于$y_1$的点中的最小值更新答案即可。对于其他拆绝对值的方式，实际上可以将所有点绕原点旋转90度然后复用上面的方法。 （拆绝对值的四种情况对应到图象上就是$2$相对$1$的四个象限） Code L dp注意到我们每次操作选取的点集可以为空，因此只要用最少的代价将这棵树调整为堆即可。 如果每次操作可以加上任意的正值，我们就可以从根dfs，每次如果当前节点小于其子树中的最大值，就要将其调整到这个值，设其差为$\\Delta$。 考虑到每次加的值$x_i$是给定的，所以在调整子树的时候要用所给$x_i$组成尽可能小的合法值（即不小于$\\Delta$的最小值），这就是经典背包问题了，$f_i=1/0 $表示用所给$x_i$能/否恰好组成$i$，扔到$set$里每次加的时候二分。 由于$\\sum x_i\\le10^6,q\\le10^3$，需要跑$10^9$次，因此考虑经典$bitset$优化01背包，时间复杂度$O(\\frac{10^{9}}{\\omega}+n)$。 Code M 贪心问题转化成往图中加边$e(i,b_i)$使得整张图是个长为$n$的环且数组$b$和$a$最接近（要在和$a$的$LCP$尽量大的前提下字典序最小）。 由于要和$a$尽可能相似，我们就从头开始令$b_i=a_i$，同时将$e(i,a_i)$插入原图，用并查集维护连通性。当遇到加入$a_x$时和之前的成小于$n$的环或者$a_x$在以前出现过时，停止插入$a$序列。此时维护图中所有点数大于$1$的链，从小到大遍历$[x,n]$，每次贪心的将$i$连向最小的可以连的链尾（即为$b_i$），同时更新链尾，直到所有数都在一个长为$n$的环上。时间复杂度$O(n\\log n)$。 Code "},{"title":"2021CCPC广州复盘","date":"2021-11-15T07:28:28.000Z","url":"/2021/11/15/2021CCPC%E5%B9%BF%E5%B7%9E%E5%A4%8D%E7%9B%98/","tags":[["比赛记录","/tags/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"]],"categories":[["比赛记录","/categories/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"]],"content":"最后一场CCPC也没有金。怎么说呢，感觉pku出题稍微有点离谱，不过自己菜也是原因之一就是了。 热身赛队友切了AB，C是神秘计算几何板子题，数据范围和精度各种神秘，三分了一下直线最短距离，然后再次被卡，愿天堂没有计算几何。 赛后听说是POJ原题，不过还是略显离谱。没想到好日子还在后面 正式赛开局就是阿伟正开，我倒开，bbg看D。看了一圈题面长度、输入规模、时间限制，感觉后面没有前期题，看到F手推了前四项感觉很神秘，此时队友在看I，听说是打表题。bbg给我们灌了H的题意，貌似很cf的构造，但是榜上dirt相当高，反倒是I很像签到，阿伟于是打表秒了。 过了I之后，就是经典两路分推，bbg和阿伟讨论H的构造，我去推好像很可做的A。A写出生成函数就是$\\prod_{i=1}^{n}\\sum_{i=1}^{\\infin}i^{c_i}x_i$前$W$项系数和，翻了波数学公式板子找到了$\\sum_{i=1}^{\\infin}i^kx_i=x^k\\frac{d^k}{dx^k}\\frac{1}{(1-x)}$，纸上推了推，发现$\\frac{d^k}{dx^k}\\frac{1}{(1-x)}=\\frac{k}{(1-x)^{(k+1)}}$的规律，所以之前的生成函数就是$\\frac{\\prod_{i=1}^{n}c_ix^c_i}{(1-x)^{\\sum_{i=1}^{n}c_i+1}}$，如果要求它的前$W$项之和，就等于原生成函数乘$\\sum_{i=0}^{n}x_i=\\frac{1}{(1-x)}$（也就是做一次前缀和）后第$W$项的系数。 然后我就不会求了 （现在想想只觉得离谱，无论是考虑前缀和的贡献还是从广义二项式定理都能随便乱推，但是当时就是没想到，再加上看了眼榜还没有人过这题就错误估计了难度，扔掉后再也没想过，最难的部分被板子解决了，却卡在临门一脚。感觉对我来说可能是这场最遗憾的事情了。） 此时H交一发wa了，听说check没问题，说明是有方案的情况时输出了$NO$，问了下当仅存在两个$0$的时候被判作无解了，在纸上乱写时搞出了一组方案，然后阿伟改改ac了。 看了下榜只有C和F看起来可做，而且F的通过率极高，于是打算一起搞C。我看了下时间限制和下面的神秘快读，断定这题是在卡非线性做法（事实证明如果队友真信了去搞线性做法，我队可能就又铜了），先跟队友讨论了一波二分check方法，突然不知道为啥去看了眼F，此时F大概是过了三四队。 想了想，为啥出题人会放个这么奇怪的公式，而且通过clarification才说清楚$f_n$是不是有标号树的计数，然后把$f_1=a,f_2=b$代入算了下$n=2$的答案，发现刚好能通分到$\\frac{a-b}{a-b}=1$，于是猜想答案可能是个定值或者只和$n$有关，然后做了个逆天决策： 设$f_1=a,f_2=b,f_3=c$，然后在纸上通分出结果 （现在想想这个问题很大，如果是猜测的话为啥不直接代入任意值代码跑一下，反正现在队友在讨论C没人上机，一下跑出来后还能多出至少半小时想K或A） 纸上写了半小时多，发现$n=3$时答案是$2$，然后让阿伟敲了个暴力，代入了$f_i=i,f_i=2*i,f_i=n+1-i$，发现都是斐波那契，遂一发ac，此时是第11个过F的队。 然后我继续去看K，C直接被阿伟一发二分答案ac，只跑了0.1s，属实离谱，不知道出题人为啥装出一副要卡log的样子。K一看就是绝活莫反，但是此时我又开始神志不清了，推了一波不考虑$lcm\\ge p$的式子，上去敲了一发结果没过第二个样例（$p=1$），太久没碰到莫反迟钝了，看着自己以前的写的东西重推了两遍式子，发现是只算了方案数，改了改过了样例。 然后就是在电脑面前不知道怎么满足lcm的限制直到比赛结束 后记桂林：我超，没有数学题，挂机了 广州：我超，全是数学题，挂了 Final Fantasy的数学手，和其他队伍比起来还是太弱了。要是我再强一点，会不会有A的一血？会不会能在封榜后的1h中做出K？会不会在最后一场正式CCPC比赛中拿到金牌？还是那句话，电子竞技，菜是原罪。 自己最大的问题还是没有经过系统性的学习，只是靠着自欺欺人的所谓天赋，通过偶尔找一些资料看看、随便学一些结论、模仿着博客推一些公式来提高自己的数学水平。太多时间被浪费在没有意义的速成中，不如多花时间读读书。 CCPC金已经没了，剩下可能达到的只有CF上红了，希望毕业之前可以达到目标。"},{"title":"2021江西省赛","date":"2021-11-10T09:38:18.000Z","url":"/2021/11/10/2021%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["个人训练","/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"]],"content":"F. Four Column Hanoi Towerdp，找规律。首先汉诺塔为三列时$ans_x=2^{x}-1$。考虑往外放一层之后，接下来最下面的几层只能按照三列的规则移动，进而当往外放$k$ G. Magic Number Group莫队。首先线性筛$O(n\\log n )$分解一下每个数的质因子，然后unique一下防止算重，然后就是边莫队边维护区间众数。用$c_i$表示质因子$i$的出现次数，$d_i$表示$\\sum_{i=1}^{max}[c_k=i]$，用一个指针维护当前最大非零$d_i$（就是答案）。考虑加入一个数的所有因子之后，答案最多左右变动一位，所以可以$O(不同质因子个数)$更新答案了。 （$Hile$的莫队入门题，赛中看kuangbin板子现学的，不会有人大四还不会莫队吧） J. LRU树状数组，前缀和。根据LRU算法，设$a_i$上一次出现的位置为$p$，区间$[p,i-1]$中有$t$个不同的数，则cache大小为$[t,+\\infin)$时都会命中。枚举右端点，树状数组维护一下不同的数，然后前缀和一下就行了。 （和前段时间某场周赛的M题，就是求区间出现次数为偶数的数的异或和那题，几乎一模一样，补了题赛中还没过就该检讨了）"},{"title":"2021CCPC桂林复盘","date":"2021-11-08T06:51:18.000Z","url":"/2021/11/08/2021CCPC%E6%A1%82%E6%9E%97%E5%A4%8D%E7%9B%98/","tags":[["比赛记录","/tags/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"]],"categories":[["比赛记录","/categories/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"]],"content":"晚节不保了，没想到大四了还会打铜。。。 热身赛热身赛开场前5min，有人还在玩蜘蛛纸牌，我不说是谁 签的很快，顺便测了下评测机速度，小常数4e8跑了2s左右，感觉很合理，可惜的是一道思路正确的C没写完，赛后得知是澳门原题，阿伟改了改交上去a了。热身赛时发挥差强人意，感觉照这个状态怎么说保底也有银，当晚打了下自己的所有板子，盲猜明天至少出一道多项式or莫反（然后就被出题组counter了）。 插曲：由于众所周知的原因，正赛前一晚睡眠不足，就此埋下了伏笔。 正式赛开场bbg飞速读题并a了两道签到，此时全场rank2，我读完G和阿伟交流了下感觉可做，稍微讨论就有了二分答案然后check的方法，然后阿伟上机1a。期间D过的也多起来了，但是听完题意后想不到靠谱的方法，也没有什么通用的构造方法，和bbg相互hack各种做法后打算上去写个对拍，此时bbg灌了下E的题意和做法，证明了一下就让阿伟去写了，此时还是不会D。 关键的转折就是阿伟上机写$E$的过程中，bbg给我灌了F的题意，我听完：这不是丝薄题吗，然后就打算让主代码手阿伟上去写，完全没注意题面里$10^9$的值域和$10^{-9}$的精度要求。等到E过了，给阿伟说了下F做法，阿伟又简化了一波。此时bbg在冲D​，我读了下B感觉可做，由于D没过也没有细想，但是D怎么想都不会。 大概开始后3h，F交上去wa了，我造了组hack数据给$ZAwei$调，然后上去写了个D的暴力对拍。$Boboge$写完后好像没拍出问题，交上去re了，发现是vector为0时访问了pos[0]，交上去又wa，然后各种修改，期间$ZAwei$也改出来了，出了好几组数据发现都没问题，于是怀疑被卡精度了。 封榜后，bbg改了改上一发代码就过了D，是个很玄学的贪心，俺属实不会。此时杂威疯狂改精度（从$10^{-6}$改到$10^{-30}$，long double也上了还是wa麻了，此时Hile在挂机。bbg说会了B，说了做法但是我开始混乱了没怎么听，继续挂机，bbg上去写了但是没写完，直接打铜。 后记感觉这场最大的失误就是上了F的当，虽然这道题开的早做法也显然，但是在全队写计算几何只会用模板且榜上dirt率高过题人数少的情况写这题，属实是错误的决策。而且，由于平时校内训练简单场顺风局打多了，面对中后期的决策失误无法冷静换题或重构。 就我个人而言，这场属实没啥作用，由于平时组队赛只负责做一些偏难的数学和构造题，而且主要是推公式而不是上机写代码，导致全面性降低，碰到自己不擅长的贪心和数据结构几乎没有想法，全程挂机。接下来平时自己需要多进行一些额外的个人训练了，比如vp几场gym保持个人的全面能力。 电子竞技，菜是原罪。"},{"title":"2018CCPC桂林","date":"2021-11-03T14:16:04.000Z","url":"/2021/11/03/2018CCPC%E6%A1%82%E6%9E%97/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"泪目了，学多项式以来，第一次在赛中做出多项式题，乌乌。 A. Array Merge贪心。听说是原题，现场的THU13min就过了，待补。 B. Array ModifyNTT，生成函数。 【前置芝士：生成函数，多项式乘法\\&amp;求逆\\&amp;求ln\\&amp;求exp】 观察or打表可以发现从某个位置开始，所有后继的贡献的生成函数为$(1+x+x^2+x^3+…+x^{L-1})^m$， 因此考虑求前$L$项为$1$的多项式$G(x)$的$m$次方，显然有$G(x)^m=e^{m\\ln G(x)}$，套板子的事，复杂度$O(n\\log n)$（如果用快速幂的方法求$G(x)^m$，复杂度是$O(n\\log^2n)$，因为每次多项式乘法是$O(n\\log n)$的）， 设$F(x)=a_0+a_1x+a_2x^2+…+a_{n-1}x^{n-1}$，求出$H(x)=G(x)^m=b_0+b_1x+b_2x^2+…+b_{n-1}x^{n-1}$之后，最后输出的第$p$位即为$\\sum_{i=0}^{n-p-1}a_{p+i}b_i$， 考虑将$H(x)$的前$L$项取反，变为$H’(x)=b_{n-1}+b_{n-2}x+…+b_0x^{n-1}$， 此时第$p$位的值就是一个卷积：$\\sum_{i=0}^{n-p-1}a_{p+i}b_{n-1-i}$（此时$p+i+n-1-i=p+n-i$）， 因此再对$F(x)$和$H’(x)$做一次多项式乘法，依次输出$n$到$2n-1$项就是答案辣。 【多项式题都是老套路了，建议是去学学，真没那么难，只要会推式子当成黑盒就行。】 【类比一下：多项式$::$网络流，推柿子$::$建图，一般来说不需要明白黑盒里面的原理（当然最好是能搞明白原理）】 G. Greatest Common Divisor数论。首先根据欧几里得定理，我们有： $\\gcd(a_1,a_2,…a_n)=\\gcd(a_1,a_2-a_1,…,a_n-a_1)$， 对于本题来说$a_i-a_1$是不变的，所以可以枚举所有$t|\\gcd(a_2-a_1,a_3-a_1,…,a_n-a_1)$，求出满足$t|a_1+k$的最小的$k$即可。 H. Hamming Distance贪心。题解可能相对长，明天写。 J. Stone Game博弈。这题其实不算啥博弈，实际上最终状态一定是由所有数的相对大小关系确定的，所以答案之和最终状态总数和初始总数之差的奇偶性有关。 从前到后扫一遍$f_i=max(a_i&gt;a_{i-1}?f_{i-1}+1:0,f_i)$ 从后到前扫一遍$f_i=max(a_i&gt;a_{i+1}?f_{i+1}+1:0,f_i)$ 即可求出最终状态。 L. Two Ants计算几何。听队友说就是抄一堆板子+分类讨论，待补。"},{"title":"NTU Preliminary 2021","date":"2021-11-03T14:15:42.000Z","url":"/2021/11/03/NTU-Preliminary-2021/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"离谱，这场又突破了过题数下限，NTU的预选赛就这么难，不愧是今年final拿牌的学校。 C. Perfect Cactustarjan。题意就是判断仙人掌中是否有大于$3$的奇环，tarjan跑出点双联通分量判断一下就行。 （题面巨长巨复杂，有用的就一句话） D. String RepetitionAC自动机。又是瓜队绝活题，差点被爆杀，待补。 E. Identity Subset很早就被开出来但是我们直到最后也没过，感觉是用牛逼性质降低复杂度的暴力，待补。 I. Road Reconstruction网络流。首先这个数据范围，这个度数限制，这个最小代价，显然是费用流。 考虑图中的边一共有三类： 被反转，代价为$a_i$ 被删除，代价为$b_i$ 不操作，代价为$0$ 显然，三类边的总和为$m$，考虑如何建图以用流量控制点的入度不大于$k$， 可以发现，三类边会给连接的点以不同方法改变入度，因此建图方法也出来了： 新建一个点$V$连向汇点，流量$inf$费用$0$，表示被删除的边。 对于每个边$i(u,v)$设置一个点$x_i$，从源点连一条流量$1$费用的边 向$u$点连一条流量$1$费用$a_i$的边，表示$i$被反转 向$V$点连一条流量$1$费用$b_i$的边，表示$i$被删除 向$v$点连一条流量$1$费用$0$的边，表示$i$不操作 从源点向每个$x_i$连一条流量$1$度数 对于每个表示原图中点的点向汇点连一条流量$k$费用$0$的边以控制入度 这样建出来的图其实很简单，从源点到汇点跑一遍MCMF，所需费用就是答案。 J. Hot Potato状压dp。考虑用$f_{bit,i}$表示到达状态$bit$且在第$i$位时的概率，其中$bit$是压缩后的各点状态，$1$表示已经到达过了。 签到级别的dp，注意逆元要提前算出来不然会TLE。 （这题还是有点卡常的，可以换C++20(64 bits)交） K. This is a Game博弈，差分前缀和。通过打表or推状态能发现$SG_k(a_i)=\\lfloor\\log_{k}a_i\\rfloor$， 【前置芝士：我们用$SG$函数来衡量一个公平博弈局面的状态，一个先手必败态的$SG$值为$0$，一个状态的$SG$值是它所有后继状态的$SG$值的$mex$，多个相互独立的游戏的$SG$值是这些游戏各自$SG$值的异或和】 因此，当且仅当存在一个$2\\le k\\le a_{min}$使得所有$SG_k(a_i)$异或和为$0$时，后手必胜。 由于$k$可能有$10^{15}$，显然不能枚举，所以反向考虑： 显然$SG(a_i)\\le \\log_210^{15}\\le60$，因此对每个$a_i$，仅存在最多$60$个的$k$的取值区间使得$SG(a_i)$不同，也就是说，我们只需要枚举最多不到$60n$个$k$的取值然后判断所有区间是否为$0$。 显然当$O(60n^2)$还是会TLE，然后再反向考虑一下（！了转反）： 如果对上述的每一个区间异或上对应的$SG_k(a_i)$，最后只要判断是否存在一个点的值为$0$就行了： 先离散化，然后差分更新区间，最后前缀和，游戏结束。 【冷知识：不只是加法和异或，只要是有结合律（$(a?b)?c=a?b?c=a?(b?c)$）和逆元（对于任意的$a$，存在$b$使得$a?b=o$，$o$是运算的单位元）的运算$’?’$都可以使用差分前缀和，以及树状数组等。有兴趣的话可以去学学抽象代数相关知识】"},{"title":"2020 ICPC Taipei-Hsinchu Site","date":"2021-11-03T14:14:44.000Z","url":"/2021/11/03/2020-ICPC-Taipei-Hsinchu-Site/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"这场题是可以，就是数据范围有点微妙，不知道出题人是不怕卡常还是太相信现场判题机。 以后集训队内都过掉的签到就不写题解了，只写一些有价值的题目。 C. Pyramiddp。考虑每个位置为$L$当且仅当这个位置被经过偶数次，所以可以通过求出每一层中所有位置被走过的人数来判断每个位置的朝向，同时记录第$k$个球的位置以确定答案。 假设当前点走过了$x$人，则有$\\lceil\\frac{x}{2}\\rceil$人往左，$\\lfloor\\frac{x}{2}\\rfloor$人往右，用$f_{i,j}$记录第$i$层第$j$个位置有多少人走过，然后$O(1)$转移到下一层。 （总复杂度算了算是$O(1e9)$左右，赛中感觉$3s$能过就莽了，没想到就跑了不到$2s$） E. A Color Game区间dp。一看范围$n,m\\le500$，$7$种颜色的区间消除操作，盲猜一波$O(7n^3)$的区间dp。 从时间复杂度上自然想到状态可能是$f_{l,r,k}$表示$l,r$内第$k$种颜色的xxx值。由于区间消除的性质，考虑如果$[l,r]$可以消除，那么的前一个状态先消到只剩一种颜色，且这种颜色数量不小于$m$。所以其实$f_{i,j,k}$表示的就是区间$[l,r]$中如果只剩$k$，最大能剩多少个（如果不剩就用$-1$表示）。 有一点需要注意，当$f_{l,r,k}\\ge m$时，要把其他颜色的$f_{l,r,k’}$设为$max(f_{i,j,k’},0)$，以防止两个不同色可消区间合并出现问题。 最终复杂度为$O(7n^3)$。 F. Cable Protection贪心 dp。血的教训2：能dp就不要贪心 题意就是求基环数上半径为1的最小点覆盖，首先考虑环上的每一棵子树做一遍树形dp，$f_{i,0/1}$表示$i$点选或不选的最小代价，然后考虑环上的点也是两个状态，用类似的方法dp即可。 （这场怎么这么多dp） G. Graph Cards树哈希，最小表示法。 【前置芝士：就是上面两个东西】 看到题自然能想到要用哈希之类的方法记录环上子树的状态，然后再对环再进行哈希（此时环上每个点代表子树的哈希值）， 对于树，我们有以下两种较好的方法进行树哈希： $f_u=1+\\sum_{son(u,v)}f_v\\times p_{s_v}$ $f_u=\\prod_{son(u,v)}(f_v+p_{s_v})$ 其中$s_u$表示$u$的子树大小，$p_i$表示第$i$个素数。 如果要判断环同构的话，就是最小表示法裸题了，详见oi-wiki。 题外话：我超，出题人未免太能卡了，同时用了两种树哈希+环上双哈希+瞎搞（反转$1$到$1e6$的素数）wa了10发才过，$1e6$的在各种哈希和处理下跑了快$3s$。。。 I. Critical Structurestarjan。赛中队友过了，待补，听说是题意不清的tarjan板子题。 K. Number with Bachelors组合。对于所有询问，十进制十六进制处理起来没啥区别，而当你可以求出第$k$大合法数字时，同样可以二分求出$[l,r]$区间内的合法数字个数，反之亦然，所以等价于只有一种询问（求第$k$大合法数字）。 就十进制来说，显然长度为$x$的数有$9\\times{9\\choose x-1}\\times(x-1)!$种选择方法，因此可以确定第$k$大合法数字的长度$L$，然后就参考这个方法，每次确定一位直到$L$。 C++读入和输出$16$进制的一个小trick： （赛中差一点写完，思路是从求区间个数二分出第$k$大，实际上反过来会容易一些，最后还是不够冷静啊）"},{"title":"2019CCPC哈尔滨","date":"2021-11-01T07:42:31.000Z","url":"/2021/11/01/2019CCPC%E5%93%88%E5%B0%94%E6%BB%A8/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"离谱，不知道现场判题机究竟多快，反正A和E带log疯狂TLE产生大量垃圾时间导致打银了。 A. Artful Paintings差分约束。考虑将黑色位置设为$1$，否则为$0$，设到第$i$个位置的前缀和为$S_i$，则 对于第一种限制，满足$S_R-S_{L-1}\\ge K$ 对于第二种限制，满足$S_N-S_R+S_{L-1}\\ge K$，由于$S_N$有单调性，可以先二分答案。 显然这是一个差分约束系统，除了上述约束外还有$0\\le S_i-S_{i-1}\\le1,\\ 0\\le S_i $，建图判断如果有负环则不合法。 （题外话：SPFA全程TLE，Bellman-Ford直接AC，关于SPFA，它死了） B. Binary Numbersdp。显然，题目给出的函数$F_k(a,b)$意义就是$a$和$b$二进制$k$位的$LCP$长度，涉及到二进制$LCP$，应该能想到这是$01$字典树上的$LCA$。 【前置芝士：树上$x$个点中，$dfs$序最小和最大的两个点的$LCA$深度最小】 （放到这题里等价于任意$x$个数，最大和最小的两个数二进制$LCP$最大） 所以题目关于$F_{m-1}(A_i,k)$的那个限制就变成了 $\\forall i\\in[1,n]\\ LCP(A_i,L_i)\\ge LCP(A_{i-1},L_{i})\\&amp;\\&amp;LCP(A_i,R_i)\\ge LCP(A_{i+1},R_{i})$ 这种选一个受左右两个影响的题就是老dp了： 设$f_{i,j,k}$表示考虑前$i$个区间，$LCP(A_{i},L_{i+1})=j,LCP(A_{i},R_{i})=k$，枚举$[L_i,R_i]$区间选的数$x$， 令$a=LCP(x,L_i),b=LCP(x,R_{i-1}),c=LCP(x,L_{i+1}),d=LCP(x,R_i)$， 则当$a\\ge j \\&amp;\\&amp; b\\le k$时有转移：$f_{i-1,j,k}\\longrightarrow f_{i,c,d}$ 总复杂度$O(m^2\\times2^m)$。 C. Competition in Swiss-system读完题就会的大模拟，待读题。 G. Game Store看样子好像是博弈+线性基，待补。 E. Exchanging Gifts拓扑排序，摩尔投票法。建反图求出每个第一类操作的贡献，然后map$O(n\\log n)$或摩尔投票法$O(n)$求众数。设众数出现次数$x$，总数为$n$，答案为$max(0,2x-n)$。 L. LRU Algorithmhash or 字典树。关键结论：假设LRU过程中cache长度无限，则每一个合法询问必然是LRU过程中的一个前缀。 因此可以暴力维护cache无限长的LRU过程中所有可能的字符串并存储其哈希值，由于数据是$5000\\times5000$，多个log会TLE，所以不如把所有前缀都存起来，然后对于每个询问$O(n)$check，总复杂度$O(n(n+q))$。"},{"title":"2020吉林省赛","date":"2021-11-01T07:42:17.000Z","url":"/2021/11/01/2020%E5%90%89%E6%9E%97%E7%9C%81%E8%B5%9B/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"NEERC之后的减压省赛，差点被碰到绝活题的瓜队爆杀。由于签到题太多，题解只写几道有价值的。 D. TrieAC自动机fail树上dfs序建可持久化线段树。 考虑AC自动机的fail指针指向的一定是其后缀（瓜队：丝薄套路题），所以可以在fail树上用dfs序建一棵线段树方便更新和查询，此时 对于1操作，等价于给出$k$个区间，将区间的并$+1$（多个区间取并集，不会有人不会吧） 对于2操作，等价于询问某点的值 Code H. Curious数论。属于是莫反裸题了，用$c_i$表示$i$在$a$中的出现次数，则有 $\\sum_{i=1}^{n}\\sum_{j=1}^{n}[gcd(i,j)=x]c_ic_j$ $=\\sum_{i=1}^{\\frac{n}{x}}\\sum_{j=1}^{\\frac{n}{x}}[gcd(i,j)=1]c_{ix}c_{jx}$ $=\\sum_{i=1}^{\\frac{n}{x}}\\sum_{j=1}^{\\frac{n}{x}}\\sum_{d|gcd(i,j)}\\mu(d)c_{ix}c_{jx}$ $=\\sum_{d=1}^{\\frac{n}{x}}\\mu(d)\\sum_{i=1}^{\\frac{n}{xd}}\\sum_{j=1}^{\\frac{n}{xd}}c_{ixd}c_{jxd}$ $O(n\\log n)$预处理后面那一块，然后对于每一个$x$调和级数暴力算答案，总复杂度$O(n\\log n)$。 I. World Tree贪心，dp。首先考虑树形dp，但是不会处理同层子树选择的优先级，考虑最优子结构贪心： 设 J. Situation博弈，记忆化搜索。一共$2\\times3^9$种状态，每种状态会转移到后继最值，复杂度$O(2\\times9\\times3^9)$，不熟悉的话可以补一补17女生赛的J题。 M. Upanishad数据结构。首先考虑如果询问改成求区间内所有出现次数为奇数的数的异或和，那么答案就是该区间的异或和，所以，$出现次数为偶数的数的异或和=区间异或和\\oplus区间set的异或和$，关键就是求出区间所有数的$set$。 考虑离线，枚举区间右端点，记录某数最后出现的位置，然后更新到树状数组上同时消除之前的影响以保证每个数只会出现一次，对于每个询问用树状数组求区间异或和即可。"},{"title":"2018-2019 ICPC, NEERC, Northern Eurasia Finals","date":"2021-11-01T07:41:54.000Z","url":"/2021/11/01/2018-2019-ICPC-NEERC-Northern-Eurasia-Finals/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"加训以来打的最艰难的一场，同时也是最难补题的一场，只能说欧洲的题目风格和中国还是差别不小，尤其是代码实现上的难度。 A. Alice the Fandp打表。19徐州打铁的教训：能暴力就不要分类讨论。 考虑$f_{a,b,c,d}$表示当前大比分为$a:b$，小比分为$c:d$时是否可行（用bool类型存储），状态数共$3\\times3\\times200\\times200$种。预处理出一局种合法的小比分情况，显然少于$400$种，因此可以$O(400)$进行dp时转移，总复杂度大概$O(1.2\\times10^8)$，同时开一个数组记录$dp$转移的路径以输出答案。 B. BitmatchingC. Cactus Search仙人掌背景的交互题，待补。 D. Distance SumE. Easy Chess签到。 F. FractionsG. Guest Student签到。 H. Harder SatisfiabilityI. Interval-Free Permutations计数，析合树。 题解待补充。 Code J. JS MinificationK. King Kog’s ReceptionL. Lazyland签到。 M. Minegraphed构造，模拟。赛中先tarjan缩点然后隔一层构造$3\\times(2n+1)$的层，这层分三个部分，如图所示 其中第$1,3$行为上层的落点和去往下层的洞，利用同层’+’的位置设置DAG的可达关系。 由于写起来过于模拟导致结束前5min才过，但是赛后发现好像有缩点都不用的简单写法，补完其它题学一下。"},{"title":"2021山东省赛","date":"2021-10-23T15:23:36.000Z","url":"/2021/10/23/2021%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9B/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"这场7题没啥难度，但之后是真的难开，补一道卡一道，本来是要补10题的，考虑难度和效果就改9题了。 A. Beta Go待补，详见ZAwei的博客。 B. Build Roads随机化。$n$较大时答案大概率为$n-1$，较小时暴力，注意$L=R$的情况。 C. Cat Virus构造。考虑对题目增加限制：要求构造出来的必须是二叉树。当某点左子树答案为$A$，右子树答案为$B$，则该点子树的答案为$A\\times B+1$，只有一个孩子的结点答案是孩子的答案$+1$，所以可以递归构造出$k$。 D. Dyson Box签到。考虑重力向下，第$i$列高为$h_i$，答案就是 $有方块的位置数\\times2+\\sum_{i=1}^{n+1}|h_i-h_{i-1}|(h_{i+1}=0)$。 E. Evaluate ExpressionF. Birthday Cake字符串。hash老题了，考虑两个字符$a,b\\ (len(a)\\le len(b))$串拼接后合法的情况： $a,b$相同 $b$的前$\\frac{len(a)+len(b)}{2}$个字符是拼接后串的一半 $map$记录一下就行，小心被卡模数和自然溢出。 G. Grade Point Average签到。 H. Adventurer’s Guild签到。 I. Chemical Code线段树。考虑当加入一个元素、数字、括号时产生的影响： 元素：相当于单点加，如果后继是数字则要： 减去数字的影响（区间除） 单点修改，加某个值 加上数字的影响（区间乘） 数字：相当于区间乘，如果前驱是括号则： 找到配对的另一个括号 将括号扩起的区间乘某个值 括号：如果后继是数字，处理方法和元素相同 但是，由于模数不是质数，这个区间除就很麻烦了（需要CRT）。但是考虑数字只有$1-9$，因此可以将复杂度$\\times10$，懒标记永久化维护$1-9$在线段树上每个节点乘的次数，由于每次都是查询1到n，所以不用pushdown，常数还巨小。 Code J. Tuition AgentK. Piggy Calculator感觉很厉害，有时间就补。 L. Construction of 5G Base Station概率dp。考虑用$f_{i,j}$表示$i$连到$j$位置的基站的概率，则有 $f_{i,j}=\\frac{p_j}{1-\\prod^{n}_{k=1}{(1-p_k)}}\\prod_{i到k比j优先}(1-p_k)$ 直观来理解，$p_j$下面那一串是$i$连遍所有基站都失败的概率，后面那一块就是$i$和优先于$j$的所有基站都匹配失败的概率。 【前置芝士1：一次试验为真的概率为$p$，如果失败会重复直到为真结束，则其期望结束次数为$\\frac{1}{p}$】 （考虑等比数列求和 或 解方程：$E(x)=p\\times0+(1-p)\\times E(x)+1$即可证明） 设$E(x_i)$为匹配到基站$i$的人个数的期望，则有 $E(x_i)=\\frac{p_i}{1-\\prod^{n}_{k=1}{(1-p_k)}}\\sum_{j=1}^{n}\\prod_{j到k比i优先}(1-p_k)$ 然后题解说，容易发现这东西后一块能用前缀和递推，（赛中感觉不可以递推就没搞，下次遇到这种最好打打草稿看看规律） 一顿操作能$O(n)$求出$i\\in[1,n]$的$E(x_i)$， （PS：这里$Hile$改了2h才过） 但是题目要求的是$E(\\sum_{i=1}^{n}{x_i}^2)$，这时就要利用期望的线性性拆开了。 【前置芝士2：如果变量$X,Y$相互独立，则$E(X+Y)=E(X)+E(Y), E(XY)=E(X)E(Y)$】 $E(\\sum_{i=1}^{n}x_i^2)=\\sum_{i=1}^{n}E(x_i^2)$， 此时，对于每一个$E(x_i^2)$，$x_i$可以看作$n$个变量$y$之和，其中$y_i=1$表示第$i$个人连接了该基站，所以有 $E(x)=\\sum_{i=1}^{n}E(y_i)$ 原式可写为 $E((\\sum_{i=1}^{n}y_i)^2)=(E(x))^2-\\sum_{i=1}^{n}(E(y_i))^2+E(x)$ 其中$\\sum_{i=1}^n(E(y_i))^2$可以在求$E(x)$的过程中一起计算。 Code M. Matrix Problem签到。"},{"title":"2021CCPC东北四省赛","date":"2021-10-19T00:14:22.000Z","url":"/2021/10/19/2021CCPC%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"都1202年了竟然有比赛会出模板题（主要是没带模板，战犯++ A. Matrix一开始的思路是计算前$n$个数分布在恰好$k$行的方案数，然后考虑了容斥、斯特林数等一堆东西，发现又重又漏。 写完H，在Awei写C的时候突然反应过来，对于每个数在一行作为最小值的情况计算贡献完全没问题且公式简洁，遂ac。 当一道被a穿的题想不出来时，及时转换思路防止钻牛角尖。 （笑死，思路想歪，2h签不出到） Solution $n\\times(n^2-n)!\\times\\sum_{i=1}^{i=n}{n^2-i\\choose n-1}$ B. Cypher五页的题面三个字：大模拟。但其实听队友一说好像难度$90\\%$都在读题上，属于是出题人不怀好意了（ 题意建议自己读，体验一下（） Code C. Vertex DeletionD. Lowbit Solution 属于是势能线段树裸题了，势能函数$f(x)$为将$x$变为$2^k$的操作次数，显然$\\max\\{f(x)\\}=log_2(x)$，所以可以维护一个标记来表示区间内的数都为$2$的幂次，当一个区间被标记时，$1$操作就变成了区间乘二。复杂度$O(n\\log^2 n)$。 Code E. Easy Math Problem签到。Hile_Meow病发，wa一发才过。 F. PermutationG. Ball计数。考虑满足$n,m,k$的状态最终一定是两段，前一段连续，后一段和前一段不连续（长度可能为0）。 假设第一段长度为$x$，令$f_{i,j}$表示扔$i$个球填满$j$个区域的方案数，$g_{i,j}$表示扔$i$个球填不满$j$个区域的方案数，则此时答案为$f_{k+x,x}\\times g_{m-k-x,n-x-1}\\times {m\\choose k+x}$， 考虑枚举所有可能的$x$，则答案为上式之和，接下来计算$f$和$g$。 可以看看ZAwei的博客，里面的转移很简单，这里提供一种相对麻烦但是没有思维难度的计算方法： 考虑$f_{i,j}$的转移有两种： 在已经填满$j$个区域的基础上再扔一个球 扔第$i$个球时恰好填满$j$个区域 第一种转移就是$f_{i-1,j}\\times j$， 第二种转移考虑枚举最后一个填的位置$x$，结果为$f_{i-j+x-1,j}\\times f_{j-x,j-x}\\times{i-1\\choose j-x}\\times(j-x+1)$， 复杂度$O(mn^2)$。 Code H. Loneliness给出一个$n\\times n$的矩阵，你的分数初始为$1$。当分数为$x$时，往上下左右分别会变成$x/2,x\\times2,x+2,x-2$（往上时$x$必须为偶数），给出一个$k$，要求输出从$(1,1)$到$(n,n)$的一条路径（可重复经过$(n,n)$在内的点）使得在终点时分数恰好为$k$。 Solution 构造。考虑$n=100$，有足够的空间去构造答案，所以不妨倒过来想$k$是怎么构造出来的（考虑二进制），可以发现能根据$k$找到一个点$P(x,y)$满足在$P$点的答案为$0$，只往右或往下就能在$(n,n)$恰好得到$k$。由于$k\\le 10^{16}&lt;2^{60}$，$P$肯定在矩阵中。 然后考虑上下左右移动就是对于$2$的加减乘除：假设初始为偶数$x$，则$x$依次右上左下移动会得到$x+2,x/2+1,x/2-1,x-2$，也就是说$x$可以这么转一圈然后原地减$2$。 问题解决了，首先二进制分解$k$求出$P$点。第一步往下移动到$(2,1)$，当前答案为$2$，通过转圈操作使答案保持为$0$，逐步右移到和$P$同纵坐标，然后就一路往下到$P$，再构造$k$就好了。题目要求操作数小于$1000$，每次转圈消耗$4$步，从$(1,1)$到$(100,100)$需要$198$步，构造的答案显然小于$1000$。 （这种构造题建议给出充足的时间让不上机的队友玩，玩着玩着就出了） Code 赛中代码有点丑，不放了。 I. Takeaway签到。Boboge秒了。 J. Transform求三维点绕三维向量旋转某角度之后的结果。 Solution Rodriguez Formula板子题。 向量$v$绕单位向量$u$旋转$\\theta$后的$v’$为 $v’=v\\cos\\theta+u(u·v)(1-\\cos\\theta)+(u\\times v)\\sin\\theta$ （其中 $·$ 为三维点乘，$\\times$为三维叉乘） Solution K. City签到。Boboge秒了。 L. k-th Smallest Common SubstringM. Master of Shuangpin签到。Boboge秒了。"},{"title":"2020CCPC东北四省赛","date":"2021-10-15T15:52:07.000Z","url":"/2021/10/15/2020CCPC%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"10.15打的组队赛，感觉自从使用了战术之后发挥稳定了不少，出了9/12题。 战术：Hile_Meow非必要不上机，Hile_Meow所读题意必让队友确认（经典wa签到+读歪题） A. Micro Structure Thread构造+MST。待补 B. Team网络流。考虑通过源汇点的流量控制$m$个组合，然后$B$向$A$建边，$A$向$C$建边，流量为1，费用为预处理的$f(u,v)$，$A$拆点控制流量为1。 虽然是求最大权值，但是因为所有路径长度相同，我们可以令每条边的权值为$M-f(u,v)$，然后跑dijkstra费用流，或者直接边权取反上spfa费用流（可处理负权边）。 C. Function数学。显然$f(x)\\le x$，而且根据这个后缀积的不可构造性，猜测大概率会收敛到一个$f(x)=x$的值（如$k000001$或一个个位数），看榜上过的挺快就直接冲了一发记忆化+暴力，跑得飞快。 D. Fall Guys签到。Boboge秒了。 E. Liner vectors构造。首先显然$n=k$且$n\\ne 1$时无解，然后考虑当$k\\%2=0$时，每一维度形成的列向量异或为0，说明任意列向量都等于其他$n-1$个列向量的异或和，矩阵不满秩。 接下来就好构造了，前$k+1$个向量的前$k+1$位形成一个对角线为0的矩阵，后面的行直接对前面$n-k-1$位每行分配一个$1$，每行剩下的$1$全放在最低的$k-1$位。 赛中写的唯一一道题，还被n=1,k=1卡了一发 Code F. Splendor贪心+大模拟的防ak。貌似不太可做 G. Halli Galli签到。Boboge秒了。 H. PepperLa’s String贪心。既然要优先最短，其次字典序最小。 分两类位置： 使字符串长度变短：删单个字符，删两个字符之一，删$16^k$个连续字符一端 使字符串长度不变：删连续相同字符一端 有第一类优先删第一类，如果能让字典序变小则删第一个能让字典序变小的，否则删最后一个第一类位置。 如果没有第一类位置，则删第一个字符。 Code I. PepperLa’s Cram School图论，小坑。由于边长相同，答案即为$d[i][j]$中最小值出现次数$/2$（一条边贡献两次），注意最小边权不一定是$1$。 J. Color the blocks签到。从$(x,y)$到$(x+1,y+2),(x-1,y+2),(x+3,y),(x-3,y)$建边，答案即为$2^{连通块数}$，显然$n\\ge4$时答案为$4$，其他手算一下就好了。 K. PepperLa’s Boastdp。考虑$f[i][j]$表示在$(i,j)$处的答案，则每次转移只会从左、上、左上移动过来或者从以$(i,j)$为右下角的一个$k\\times k$的矩形转移而来，也就是说要$O(1)$求出左上矩形内的最大值，这就是二维单调队列裸题了。 二维单调队列：对每行和每列都开一个单调队列，先把答案更新到该列中，再用该列的答案更新该行。 Code L. PepperLa’s Express搜索。首先遇到$\\min$和$\\max$来回套的题，第一反应必是二分答案。考虑二分了一个答案$mid$，可以先做一个bfs把所有已经和’@’距离在$mid$内的’*‘搞掉，然后考虑求出距离每个位置最远的’*‘，如果存在某个空格最远距离小于$mid$，说明可以把新的’@’放在这里使答案不大于$mid$。 赛中其实讨论了一个憨批做法，对于每一维来回扫一遍，从一维更新到三维，复杂度$O(8XYZ)$，但是写起来有点恶心，而且好像会爆空间，赛中没写完。 看出题人的方法有点牛，既然是找距离最远的点，那必然是$|x_i-x_j|+|y_i-y_j|+|z_i-z_j|$最大，我们可以把里面的正负号拆开，$i,j$各存$2^3$种，我们可以直接在为长为3的二进制互为补集的两种组合中求答案。 感觉这个拆绝对值符号的思路挺好，而且代码写起来也很简洁。 Code "},{"title":"2017CCPC女生赛","date":"2021-10-15T14:24:16.000Z","url":"/2021/10/15/2017CCPC%E5%A5%B3%E7%94%9F%E8%B5%9B/","tags":[["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["个人训练","/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"]],"content":"最近组队赛有点拉跨，于是个人vp加训，写写题解。 A - Automatic Judge签到，模拟。 Code B - Building Shopsdp。先对每个pair按照位置排序，$f[i][j]$为考虑前$i$个点，上一次选在$j$时的答案，则有 $f[i][j]=min(f[i][j],f[i-1][j]+x[i]-x[j])(i!=j)$ $f[i][j]=min(f[i][j],f[i-1][j]+c[i])(i==j)$ 最终答案为$max(\\{f[n][1…n]\\})$。 Code C - Coprime Sequence签到，处理出前后缀$\\gcd$然后枚举删的位置。 Code D - Deleting Edges图论。考虑最终形成的是一棵以0为根的生成树，可以枚举最后形成的树中每个点连向父亲的那条边，对每个结点来说，删边方案是相互独立的（因为树上每个点的父亲唯一），乘起来就是最终答案。 Code E - Easy Summation签到，怎么做都行。 Code F - Forgiveness赛中没过，待补。感觉是个$O(10\\times n\\times\\sqrt{n}\\times\\log{n})$的分块（应该没有$\\log{n}$？）。 （后记：Claris出的防AK，据说要bitset搞搞） G - Graph Theory图论。考虑每个1和前面的2匹配，剩下的1两两匹配，剩下2或者n为奇数就是No。 Code H - Happy Necklace打表，数学。题意等价求长为n且两个0的距离大于2的01串的方案数，赛中人工打了个表(2,3,4,6,9,13)，发现是$f[n]=f[n-1]+f[n-3]$，矩阵快速幂即可。 Code I - Innumerable Ancestors树论。结论：$k$个点中LCA深度最大的两点dfs序一定相邻（考虑反证法），所以对集合A,B按照dfs序排序并双指针处理。 Code J - Judicious Strategy博弈，打表。直接$O(n^3\\log n)$预处理出所有子串及其权值，然后打表，记录一个$(win,A,B)$的三元组表示胜负状态和玩家分数，注意一个字符串中的同一个子串只算出现一次（如”aaaa”中，”aa”的出现次数为1）。 Code "},{"title":"计算数论习题选证","date":"2021-02-08T18:57:50.000Z","url":"/2021/02/09/%E8%AE%A1%E7%AE%97%E6%95%B0%E8%AE%BA%E4%B9%A0%E9%A2%98%E9%80%89%E8%AF%81/","tags":[["数论","/tags/%E6%95%B0%E8%AE%BA/"]],"categories":[["数学","/categories/%E6%95%B0%E5%AD%A6/"]],"content":"这是为《A Computational Introduction to Number Theory and Algebra （Version 2）》（资源）中某些和ACM用数论有关的习题写的证明。还没看完，好难QAQ EXERCISE 1.17 已知正整数$a,b,c$满足$\\gcd(a,b)=1$，$c\\ge(a-1)(b-1)$， 求证：总是存在非负整数$s,t$满足$c=as+bt$ 证明1： 当$s\\in[0,b-1]$时$as$模$b$的结果恰好构成$b$的完全剩余系， 所以存在$s\\in[0,b-1]$使$n\\equiv as\\mod b$成立， 此时$bt=c-as\\ge (a-1)(b-1)-as=(b-1-s)a-(b-1)\\ge -b+1$， 即$t\\ge\\frac{-b+1}{b}&gt;\\frac{-b}{b}=-1$。$\\Box$ 证明2： 考虑其$c=as+bt$存在非整数解$(s,t)$的几何意义， 即直线$y=-\\frac{b}{a}x+\\frac{c}{a}$在第一象限（含坐标轴）过任意整点。 EXERCISE 1.27 已知$a,b\\in Z$， 求证：$\\gcd(a+b,\\mathrm{lcm}(a,b))=\\gcd(a,b)$ 证明： 设$d=\\gcd(a,b),s=\\frac{a}{d},t=\\frac{b}{d}$， 易知$\\gcd(s,t)=1$， $\\gcd(a+b,\\mathrm{lcm}(a,b))$ $=\\gcd(d(s+t),\\frac{ab}{d})$ $=d\\gcd(s+t,st)$ 又因$(s+t)\\nmid s$且$(s+t)\\nmid t$，$\\gcd(s+t,st)=1$， 即$\\gcd(a+b,\\mathrm{lcm}(a,b))=d=\\gcd(a,b)$。$\\Box$ EXERCISE 2.10 求证：不存在$a,b$满足$7a^3+2=b^3$ 证明： 若$7a^3+2=b^3$， 则有$7a^3+2\\equiv b^3\\mod7$， 即$2=b^3\\mod7$ 由于$(b+7)^3\\equiv b^3\\mod7$， 且$1^3\\equiv2^3\\equiv1,3^3\\equiv5^3\\equiv6^3\\equiv6,4^3\\equiv4,7^3\\equiv0$， 因此$7a^3+2=b^3$不成立。$\\Box$ EXERCISE 2.12 已知整数$a_1,a_2,..a_k,b$和正整数$n$，设$d=\\gcd(a_1,…,a_k,n)$， 求证：$a_1x_1+a_2x_2+…+a_kx_k \\equiv b\\mod n$有解$\\{x_i\\}_{i=1}^{k}$当且仅当$d|b$ 暂无想法，待证 EXERCISE 2.13 暂无想法，待证 EXERCISE 2.16 已知$\\{n_i\\}_{i=1}^{k}$两两互质，对于整数$\\{a_i\\}_{i=1}^k,\\{b_i\\}_{i=1}^k$，设$d_i=\\gcd(a_i,n_i)$， 求证：存在$x$满足$\\forall i \\in [1,k], a_ix\\equiv b_i\\mod n_i$当且仅当$\\forall i\\in[1,k],d_i|b_i$ 暂无想法，待证 EXERCISE 2.23 求证：$\\varphi(nm)=\\gcd(n,m)*\\varphi(\\mathrm{lcm}(n,m))$ 证明： $n=\\prod p_{i}^{a_i},m=\\prod p_{i}^{b_i}$， $\\gcd(n,m)=\\prod p_{i}^{min(a_i,b_i)},\\mathrm{lcm}(n,m)=\\prod p_{i}^{max(a_i,b_i)}$， $\\gcd(n,m)\\varphi(\\mathrm{lcm}(n,m))=\\prod p_{i}^{min(a_i,b_i)}\\prod p_{i}^{max(a_i,b_i)-1}(p_i-1)$ $=\\prod p_{i}^{a_i+b_i-1}(p_i-1)=\\varphi(nm)$。$\\Box$ EXERCISE 2.24 已知$n$有$r$个不同的奇质因子， 求证：$2^r|\\varphi(n)$ 证明： $\\varphi(n)=\\prod p_{i}^{e_i-1}(p_i-1)$， 其中$r$个奇质因子的贡献为$\\prod_{i=1}^{r} p_i^{e_i-1}(p_i-1)$， 又因$p_i^{e_i-1}\\ge1$且$p_i-1\\equiv0\\mod2$， 因此$2^r|\\varphi(n)$。$\\Box$ EXERCISE 2.25 定义$\\varphi_{2}(n)=\\sum_{i=0}^{n-1}[\\gcd(i,n)=1\\land\\gcd(i+1,n)=1]$， 求证：对于$n=\\prod_{i=1}^{r}p_i^{e_i}$，$\\varphi_2(n)=n\\prod_{i=1}^r(1-2/p_i)$ 证明： 考虑$n’=p^e$，对于所有的$a\\in[0,n’-1]$，不满足$\\gcd(a,n’)=1\\land\\gcd(a+1,n’)=1$的值有： $0\\times p,1\\times p-1,1\\times p,$ $2\\times p-1,2\\times p,$ $…,$ $(p^{e-1}-1)\\times p-1,(p^{e-1}-1)\\times p，p^e-1$ 将$i\\times p-1$与$i\\times p$配对，将$0\\times p$与$p^e-1$配对， 发现共有$p^{e-1}$对不满足条件的数， 因此$\\varphi_2(p^e)=p^e-2p^{e-1}=p^e(1-2/p)$， 故$\\varphi(n)=\\prod_{i=1}^{r}p_i^{e_i}(1-2/p_i)=n\\prod_{i=1}^r(1-2/p_i)$。$\\Box$"},{"title":"Namomo-Camp-2021-day4-构造","date":"2021-02-08T18:56:39.000Z","url":"/2021/02/09/Namomo-Camp-2021-day4-%E6%9E%84%E9%80%A0/","tags":[["Namomo Camp","/tags/Namomo-Camp/"],["构造","/tags/%E6%9E%84%E9%80%A0/"]],"categories":[["Namomo Camp 2021","/categories/Namomo-Camp-2021/"]],"content":"2020ICPC济南J 题意 给一棵树上的所有点赋值使得$u,v$间有边当且仅当$w[u]|w[v]=2^{60}-1$（’$|$’为二进制按位或） 题解 为了方便构造，我们对这棵树进行黑白染色， 为了防止同色点之间产生边，可以令黑点权值二进制前两位为$01$，白点为$10$， 再考虑对构造方法增加限制以方便构造， 由题意得，权值的二进制最大可以有$60$位， 显然，点数较少的一种颜色（以下当作白色）不会超过$50$种， 因此，我们可以增加一个限制：所有白点权值二进制中有且仅有一个$0$， 这样就能构造出一组权值互不相同的白点， 有了白点，黑点就可以直接确定了，例如 如果$w[1]=11…1110,w[4]=11…1101,w[5]=11…1011$（忽略前两位$01$和$10$，下同）， 则$w[2]=00…0001,w[3]=00…0111,w[6]=w[7]=00…0010$， 此时白点的$0$位就相当于钥匙孔，黑点的$1$就相当于钥匙，一个钥匙（黑点）必须能打开周围的所有锁， 这样想，边的关系就确定了，游戏结束。 代码 2020ICPC济南E 题意 在写了在写了 题解 在写了在写了 代码 在写了在写了 证明题 命题 对任意$2n-1$个数，一定存在$n$个数使其和为$n$的倍数 证明 在写了在写了 总结构造问题的一般思路： 增量构造，从$f(n-k)$到$f(n)$，一般要正推 递归构造，从$f(\\frac{n}{k})$到$f(n)$，一般要逆推 转移构造，【从$f$到$g$】等价于【先从$f$到$h$，再从$h$到$g$】 增加限制，当构造自由度太高时可以视情况增加一些限制 待定参数，先考虑答案的状态，将其中一些参数设为未知，然后求出参数和答案的关系 调整构造，先按照某种方法构造出近似解，然后按照某种原则微调至答案 随机构造，利用题目里的随机性构造答案，一般和概率的计算有关 "},{"title":"Namomo-Camp-2021-day1-DP","date":"2021-02-08T18:27:51.000Z","url":"/2021/02/09/Namomo-Camp-2021-day1-DP/","tags":[["Namomo Camp","/tags/Namomo-Camp/"],["DP","/tags/DP/"]],"categories":[["Namomo Camp 2021","/categories/Namomo-Camp-2021/"]],"content":"luoguP2612 题意 设一个排列的权值为相邻两数差的绝对值之和，求长度为$n$的随机排列权值不小于$m$的概率（$n\\le100$） 题解 考虑一个填完的排列中每个数对答案的贡献， 设当前填的数为$b$，其前后的数分别为$a$和$c$，则有三种情况： 当$[a&lt;b\\land c&lt;b]==1$时，答案要加上$|a-b|+|b-c|=2\\times b-a-c$，$b$对答案的贡献为$2\\times b$ 当$[a&lt;b\\oplus c&lt;b]==1$时，答案要加上$|a-b|+|b-c|=|a-c|$，$b$对答案的贡献为$0$ 当$[a&gt;b\\land c&gt;b]==1$时，答案要加上$|a-b|+|b-c|=a+c-2\\times b$，$b$对答案的贡献为$-2\\times b$ 为了消去绝对值的影响，我们从小到大填数。 在从小到大填数时，出现情况1说明填当前位置时左右都非空，出现情况2说明左右有一个非空，出现情况3说明左右都为空，而且如果填在两端要特殊处理一下。 考虑用$f(i,j,k,t)$表示已经填了$i$个数，构成了$j$个连续段，答案为$k$，有$t$个端点填了数的方案数，其中$i\\in[0,n],j\\in[0,\\lceil\\frac{n}{2}\\rceil],k\\in[-4500,4500],t\\in[0,2]$， 如果不填在两端，根据上面的情况，有三种转移方式： $f(i,j,k,l)\\longrightarrow f(i+1,j,k,l)$ $f(i,j,k,l)\\longrightarrow f(i+1,j+1,k-2\\times i,l)$ $f(i,j,k,l)\\longrightarrow f(i+1,j-1,k+2\\times i,l)$ 如果填在两端，有两种转移方式（端点旁边是否有数）： $f(i,j,k,l)\\longrightarrow f(i,j,k+i,l+1)$ $f(i,j,k,l)\\longrightarrow f(i,j+1,k-i,l+1)$ 转移时注意乘上可以选择的方案数。 代码 这题着实恶心，得面向数据范围编程，$k\\le8$用long double，否则用__float128才能过，所以写的又臭又长，这里只放了dp部分的代码 CF908G 题意 $S(n)$为$n$所有位数非降序排列后的数值，求$\\sum_{i=1}^X S(i)\\mod 10^9+7$（$X\\le10^{700}$） 题解 应该是自己做过的第三道数位dp，数位dp好难啊 看这个数据范围，$10^{700}$，显然是数位dp，但有一说一确实挺怪的， 河里猜测，状态数应该是$700\\times 700\\times 10\\times x$， 然后就不会了（ 看了别人的题解，发现其实还是挺好懂的， 举个例子，$S(114514)$可以拆成三部分的贡献：$S(114514)=111445=111111+111+1$（其实是九部分，对应$1-9$）， 因此可以分别枚举每个位置产生的贡献之和，然后分别加起来， 具体来说就是 没写完 代码 CF1142D 题意 给定$n$个非降序排列的数组，第$i$个数组长度为$t_i$，每次操作可以取出任意数组最左边的数（相当于删除）并加到答案里，求$k$次操作后的最大答案（$n,k\\le3000$） 题解 一个显然的结论是，最多只有一个数组被取数但没有被全取完，利用反证法容易证明。 根据这个结论，最暴力的办法就是考虑枚举没选中的数组然后对其他的做一遍背包， 但是这是$O(n^2k)$的，显然会超时，s思考后发现，在枚举不同数组进行背包的时候，只有两个物品不同，其他$n-2$个都是一样的， 因此可以考虑如何重复使用这些物品，起码要优化到$O(nk\\log n)$才行， 既然带了个$\\log$，大概率要用线段树， 朝着这个方向想想，结果就出来了， 我们可以在线段树节点$(i,l,r)$上用$f(i)$来储存除了$l,r$数组之外的所有物品做$01$背包后的结果， 这样就把$n^2k$枚举时的加减物品变成了从根到叶的加物品操作， 叶节点即为之前所枚举的没有被全取完的数组，复杂度$O(nk\\log n)$。 代码 300iq Contest 3 C 题意 在写了在写了 题解 在写了在写了 代码 CF729F 题意 给定一长度为$n$的数组，$A$和$B$分别从左右端取数字加到自己身上，设$A,B$的分数分别为$W_A,W_B$，$S=W_A-W_B$，$A$想让$S$更大，$B$想让$S$更小，$A,B$都会采取最优策略，求最终$S$的值（$n\\le4000$） 题解 在写了在写了 代码 2019CCPC秦皇岛G 题意 在写了在写了 题解 在写了在写了 代码 代码： [ ] 2020ICPC上海F [ ] CF1428G [ ] CF1383C [ ] 2018CCPC吉林 [ ] DTOJ4632（没找到链接） "}]